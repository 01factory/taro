// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`wx-hybrid should compatible with weapp native pages and components 1`] = `26`;

exports[`wx-hybrid should compatible with weapp native pages and components 2`] = `
"
/** filePath: dist\\\\pages\\\\native\\\\native.wxml **/
<view class=\\"native\\" bindtap=\\"viewTap\\">
  <text>{{text}}{{x}}</text>
  <tab myProperty=\\"kkl\\" bindmyevent=\\"handler\\" />
</view>


/** filePath: dist\\\\pages\\\\native\\\\native.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 13 ], {
    17: function(module, exports, __webpack_require__) {
        const {add: add} = __webpack_require__(18);
        Page({
            data: {
                text: \\"This is page data.\\",
                x: add(1, 2)
            },
            created(options) {
                console.log(options);
            },
            onReady() {},
            viewTap() {
                this.setData({
                    text: \\"Set some data for updating view.\\"
                }, (function() {}));
            },
            handler(e) {
                console.log(e);
            },
            customData: {
                hi: \\"MINA\\"
            }
        });
    },
    18: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.add = add;
        function add(a, b) {
            return a + b;
        }
    }
}, [ [ 17, 0 ] ] ]);

/** filePath: dist\\\\pages\\\\native\\\\native.wxss **/
.native{color:red}

/** filePath: dist\\\\pages\\\\native\\\\native.json **/
{\\"navigationBarBackgroundColor\\":\\"#ffffff\\",\\"navigationBarTextStyle\\":\\"black\\",\\"navigationBarTitleText\\":\\"混写页面示例\\",\\"backgroundColor\\":\\"#eeeeee\\",\\"backgroundTextStyle\\":\\"light\\",\\"usingComponents\\":{\\"custom-wrapper\\":\\"../../custom-wrapper\\",\\"tab\\":\\"../../components/tab/tab\\"}}

/** filePath: dist\\\\pages\\\\index\\\\index.wxss **/
.title{text-align:center;line-height:80rpx;font-size:36rpx}.main{padding:0 50rpx}.wrapper{margin-bottom:24rpx}

/** filePath: dist\\\\pages\\\\index\\\\index.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 11 ], {
    14: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__);
        var _node_modules_babel_loader_lib_index_js_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
        var _node_modules_babel_loader_lib_index_js_index_js__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__.n(_node_modules_babel_loader_lib_index_js_index_js__WEBPACK_IMPORTED_MODULE_1__);
        var config = {
            navigationBarTitleText: \\"\\\\u9996\\\\u9875\\",
            usingComponents: {
                tab: \\"../../components/tab/tab\\"
            }
        };
        var inst = Page(Object(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__[\\"createPageConfig\\"])(_node_modules_babel_loader_lib_index_js_index_js__WEBPACK_IMPORTED_MODULE_1___default.a, \\"pages/index/index\\", {
            root: {
                cn: []
            }
        }, config || {}));
    },
    16: function(module, exports, __webpack_require__) {},
    6: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        var _interopRequireDefault = __webpack_require__(3).default;
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _taro = _interopRequireDefault(__webpack_require__(1));
        var _react = _interopRequireDefault(__webpack_require__(2));
        var _components = __webpack_require__(15);
        __webpack_require__(16);
        class Index extends _react.default.Component {
            gotoWxParse() {
                _taro.default.navigateTo({
                    url: \\"/pages/wxParse/wxParse\\"
                });
            }
            gotoEcharts() {
                _taro.default.navigateTo({
                    url: \\"/pages/echarts/echarts\\"
                });
            }
            gotoNative() {
                _taro.default.navigateTo({
                    url: \\"/pages/native/native\\"
                });
            }
            tabEvent(e) {
                console.log(e);
            }
            render() {
                return _react.default.createElement(_components.View, {
                    className: \\"index\\"
                }, _react.default.createElement(_components.View, {
                    className: \\"title\\"
                }, \\"\\\\u4e0e\\\\u5c0f\\\\u7a0b\\\\u5e8f\\\\u539f\\\\u751f\\\\u878d\\\\u5408\\\\u7684\\\\u5404\\\\u79cd\\\\u793a\\\\u4f8b\\"), _react.default.createElement(_components.View, {
                    className: \\"main\\"
                }, _react.default.createElement(_components.View, {
                    className: \\"wrapper\\"
                }, _react.default.createElement(\\"tab\\", {
                    onMyevent: this.tabEvent,
                    myProperty: \\"This is tab\\"
                })), _react.default.createElement(_components.View, {
                    className: \\"wrapper\\"
                }, _react.default.createElement(_components.Button, {
                    type: \\"primary\\",
                    onClick: this.gotoNative
                }, \\"\\\\u6df7\\\\u5199\\\\u539f\\\\u751f\\\\u9875\\\\u9762\\\\u793a\\\\u4f8b\\"))));
            }
        }
        exports.default = Index;
    }
}, [ [ 14, 0, 1, 3, 2 ] ] ]);

/** filePath: dist\\\\pages\\\\index\\\\index.json **/
{\\"navigationBarTitleText\\":\\"首页\\",\\"usingComponents\\":{\\"custom-wrapper\\":\\"../../custom-wrapper\\",\\"tab\\":\\"../../components/tab/tab\\",\\"comp\\":\\"../../comp\\"}}

/** filePath: dist\\\\pages\\\\index\\\\index.wxml **/
<import src=\\"../../base.wxml\\"/>
<template is=\\"taro_tmpl\\" data=\\"{{root:root}}\\" />

/** filePath: dist\\\\components\\\\tab\\\\tab.wxml **/
<view class=\\"tab\\" bindtap=\\"clickHandler\\">
  {{myProperty}}
</view>


/** filePath: dist\\\\components\\\\tab\\\\tab.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 7 ], {
    21: function(module, exports) {
        Component({
            behaviors: [],
            properties: {
                myProperty: {
                    type: String,
                    value: \\"\\",
                    observer: function(newVal, oldVal, changedPath) {}
                },
                myProperty2: String
            },
            data: {},
            attached: function() {},
            moved: function() {},
            detached: function() {},
            methods: {
                onMyButtonTap: function() {
                    this.setData({});
                },
                _myPrivateMethod: function() {
                    this.setData({
                        \\"A[0].B\\": \\"myPrivateData\\"
                    });
                },
                _propertyChange: function(newVal, oldVal) {},
                clickHandler() {
                    console.log(\\"sdsd\\");
                    this.triggerEvent(\\"myevent\\", {
                        f: 1
                    });
                }
            }
        });
    }
}, [ [ 21, 0 ] ] ]);

/** filePath: dist\\\\components\\\\tab\\\\tab.json **/
{\\"component\\":true,\\"usingComponents\\":{}}

/** filePath: dist\\\\runtime.js **/
(function(modules) {
    function webpackJsonpCallback(data) {
        var chunkIds = data[0];
        var moreModules = data[1];
        var executeModules = data[2];
        var moduleId, chunkId, i = 0, resolves = [];
        for (;i < chunkIds.length; i++) {
            chunkId = chunkIds[i];
            if (Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
                resolves.push(installedChunks[chunkId][0]);
            }
            installedChunks[chunkId] = 0;
        }
        for (moduleId in moreModules) {
            if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
                modules[moduleId] = moreModules[moduleId];
            }
        }
        if (parentJsonpFunction) parentJsonpFunction(data);
        while (resolves.length) {
            resolves.shift()();
        }
        deferredModules.push.apply(deferredModules, executeModules || []);
        return checkDeferredModules();
    }
    function checkDeferredModules() {
        var result;
        for (var i = 0; i < deferredModules.length; i++) {
            var deferredModule = deferredModules[i];
            var fulfilled = true;
            for (var j = 1; j < deferredModule.length; j++) {
                var depId = deferredModule[j];
                if (installedChunks[depId] !== 0) fulfilled = false;
            }
            if (fulfilled) {
                deferredModules.splice(i--, 1);
                result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
            }
        }
        return result;
    }
    var installedModules = {};
    var installedChunks = {
        0: 0
    };
    var deferredModules = [];
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.r = function(exports) {
        if (typeof Symbol !== \\"undefined\\" && Symbol.toStringTag) {
            Object.defineProperty(exports, Symbol.toStringTag, {
                value: \\"Module\\"
            });
        }
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
    };
    __webpack_require__.t = function(value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === \\"object\\" && value && value.__esModule) return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, \\"default\\", {
            enumerable: true,
            value: value
        });
        if (mode & 2 && typeof value != \\"string\\") for (var key in value) __webpack_require__.d(ns, key, function(key) {
            return value[key];
        }.bind(null, key));
        return ns;
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module[\\"default\\"];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, \\"a\\", getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = \\"/\\";
    var jsonpArray = wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || [];
    var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
    jsonpArray.push = webpackJsonpCallback;
    jsonpArray = jsonpArray.slice();
    for (var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
    var parentJsonpFunction = oldJsonpFunction;
    checkDeferredModules();
})([]);

/** filePath: dist\\\\taro.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 1 ], {
    0: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _default = \\"taro-runtime-mock\\";
        exports.default = _default;
    },
    15: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _default = \\"taro-components-mock\\";
        exports.default = _default;
    },
    5: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _default = \\"taro-react-mock\\";
        exports.default = _default;
    }
} ]);

/** filePath: dist\\\\common.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 2 ], [ , function(module, exports, __webpack_require__) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
        value: true
    });
    exports.default = exports.EMPTY_OBJ = void 0;
    exports.isArray = isArray;
    exports.isFunction = isFunction;
    exports.mergeInternalComponents = mergeInternalComponents;
    exports.mergeReconciler = mergeReconciler;
    exports.processApis = processApis;
    var _default = \\"taro\\";
    exports.default = _default;
    function mergeReconciler() {}
    function mergeInternalComponents() {}
    function isFunction() {}
    function isArray() {}
    function processApis() {}
    const EMPTY_OBJ = {};
    exports.EMPTY_OBJ = EMPTY_OBJ;
}, function(module, exports, __webpack_require__) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
        value: true
    });
    exports.default = void 0;
    var _default = \\"react-mock\\";
    exports.default = _default;
} ] ]);

/** filePath: dist\\\\vendors.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 3 ], {
    3: function(module, exports) {
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\\"default\\"] = module.exports;
    }
} ]);

/** filePath: dist\\\\app.wxss **/


/** filePath: dist\\\\app.js **/
require(\\"./runtime\\");

require(\\"./common\\");

require(\\"./vendors\\");

require(\\"./taro\\");

(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 4 ], {
    11: function(module, exports, __webpack_require__) {},
    23: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var mocks_taro = __webpack_require__(1);
        const needPromiseApis = new Set([ \\"authPrivateMessage\\", \\"disableAlertBeforeUnload\\", \\"enableAlertBeforeUnload\\", \\"getBackgroundFetchData\\", \\"getGroupEnterInfo\\", \\"getShareInfo\\", \\"getWeRunData\\", \\"join1v1Chat\\", \\"openVideoEditor\\", \\"saveFileToDisk\\", \\"scanItem\\", \\"setEnable1v1Chat\\", \\"setWindowSize\\", \\"sendBizRedPacket\\", \\"startFacialRecognitionVerify\\", \\"openCustomerServiceChat\\", \\"getLocalIPAddress\\", \\"getUserProfile\\" ]);
        function initNativeApi(taro) {
            Object(mocks_taro[\\"processApis\\"])(taro, wx, {
                needPromiseApis: needPromiseApis,
                modifyApis(apis) {
                    apis.delete(\\"lanDebug\\");
                }
            });
            taro.cloud = wx.cloud;
            taro.getTabBar = function(pageCtx) {
                var _a;
                if (typeof (pageCtx === null || pageCtx === void 0 ? void 0 : pageCtx.getTabBar) === \\"function\\") {
                    return (_a = pageCtx.getTabBar()) === null || _a === void 0 ? void 0 : _a.$taroInstances;
                }
            };
        }
        const _true = \\"true\\";
        const _false = \\"false\\";
        const _empty = \\"\\";
        const _zero = \\"0\\";
        const components = {
            Progress: {
                \\"border-radius\\": _zero,
                \\"font-size\\": \\"16\\",
                duration: \\"30\\",
                bindActiveEnd: _empty
            },
            RichText: {
                space: _empty
            },
            Text: {
                \\"user-select\\": _false
            },
            Map: {
                polygons: \\"[]\\",
                subkey: _empty,
                rotate: _zero,
                skew: _zero,
                \\"max-scale\\": \\"20\\",
                \\"min-scale\\": \\"3\\",
                \\"enable-3D\\": _false,
                \\"show-compass\\": _false,
                \\"show-scale\\": _false,
                \\"enable-overlooking\\": _false,
                \\"enable-zoom\\": _true,
                \\"enable-scroll\\": _true,
                \\"enable-rotate\\": _false,
                \\"enable-satellite\\": _false,
                \\"enable-traffic\\": _false,
                setting: \\"[]\\",
                bindLabelTap: _empty,
                bindRegionChange: _empty,
                bindPoiTap: _empty
            },
            Button: {
                lang: \\"en\\",
                \\"session-from\\": _empty,
                \\"send-message-title\\": _empty,
                \\"send-message-path\\": _empty,
                \\"send-message-img\\": _empty,
                \\"app-parameter\\": _empty,
                \\"show-message-card\\": _false,
                \\"business-id\\": _empty,
                bindGetUserInfo: _empty,
                bindContact: _empty,
                bindGetPhoneNumber: _empty,
                bindChooseAvatar: _empty,
                bindError: _empty,
                bindOpenSetting: _empty,
                bindLaunchApp: _empty
            },
            Form: {
                \\"report-submit-timeout\\": _zero
            },
            Input: {
                \\"always-embed\\": _false,
                \\"adjust-position\\": _true,
                \\"hold-keyboard\\": _false,
                bindKeyboardHeightChange: _empty
            },
            Picker: {
                \\"header-text\\": _empty
            },
            PickerView: {
                \\"immediate-change\\": _false,
                bindPickStart: _empty,
                bindPickEnd: _empty
            },
            Slider: {
                color: \\"'#e9e9e9'\\",
                \\"selected-color\\": \\"'#1aad19'\\"
            },
            Textarea: {
                \\"show-confirm-bar\\": _true,
                \\"adjust-position\\": _true,
                \\"hold-keyboard\\": _false,
                \\"disable-default-padding\\": _false,
                \\"confirm-type\\": \\"'return'\\",
                \\"confirm-hold\\": _false,
                bindKeyboardHeightChange: _empty
            },
            ScrollView: {
                \\"enable-flex\\": _false,
                \\"scroll-anchoring\\": _false,
                \\"refresher-enabled\\": _false,
                \\"refresher-threshold\\": \\"45\\",
                \\"refresher-default-style\\": \\"'black'\\",
                \\"refresher-background\\": \\"'#FFF'\\",
                \\"refresher-triggered\\": _false,
                enhanced: _false,
                bounces: _true,
                \\"show-scrollbar\\": _true,
                \\"paging-enabled\\": _false,
                \\"fast-deceleration\\": _false,
                bindDragStart: _empty,
                bindDragging: _empty,
                bindDragEnd: _empty,
                bindRefresherPulling: _empty,
                bindRefresherRefresh: _empty,
                bindRefresherRestore: _empty,
                bindRefresherAbort: _empty
            },
            Swiper: {
                \\"snap-to-edge\\": _false,
                \\"easing-function\\": \\"'default'\\"
            },
            SwiperItem: {
                \\"skip-hidden-item-layout\\": _false
            },
            Navigator: {
                target: \\"'self'\\",
                \\"app-id\\": _empty,
                path: _empty,
                \\"extra-data\\": _empty,
                version: \\"'version'\\"
            },
            Camera: {
                mode: \\"'normal'\\",
                resolution: \\"'medium'\\",
                \\"frame-size\\": \\"'medium'\\",
                bindInitDone: _empty,
                bindScanCode: _empty
            },
            Image: {
                webp: _false,
                \\"show-menu-by-longpress\\": _false
            },
            LivePlayer: {
                mode: \\"'live'\\",
                \\"sound-mode\\": \\"'speaker'\\",
                \\"auto-pause-if-navigate\\": _true,
                \\"auto-pause-if-open-native\\": _true,
                \\"picture-in-picture-mode\\": \\"[]\\",
                bindstatechange: _empty,
                bindfullscreenchange: _empty,
                bindnetstatus: _empty,
                bindAudioVolumeNotify: _empty,
                bindEnterPictureInPicture: _empty,
                bindLeavePictureInPicture: _empty
            },
            Video: {
                title: _empty,
                \\"play-btn-position\\": \\"'bottom'\\",
                \\"enable-play-gesture\\": _false,
                \\"auto-pause-if-navigate\\": _true,
                \\"auto-pause-if-open-native\\": _true,
                \\"vslide-gesture\\": _false,
                \\"vslide-gesture-in-fullscreen\\": _true,
                \\"ad-unit-id\\": _empty,
                \\"poster-for-crawler\\": _empty,
                \\"show-casting-button\\": _false,
                \\"picture-in-picture-mode\\": \\"[]\\",
                \\"enable-auto-rotation\\": _false,
                \\"show-screen-lock-button\\": _false,
                \\"show-snapshot-button\\": _false,
                \\"show-background-playback-button\\": _false,
                \\"background-poster\\": _empty,
                bindProgress: _empty,
                bindLoadedMetadata: _empty,
                bindControlsToggle: _empty,
                bindEnterPictureInPicture: _empty,
                bindLeavePictureInPicture: _empty,
                bindSeekComplete: _empty,
                bindAdLoad: _empty,
                bindAdError: _empty,
                bindAdClose: _empty,
                bindAdPlay: _empty
            },
            Canvas: {
                type: _empty
            },
            Ad: {
                \\"ad-type\\": \\"'banner'\\",
                \\"ad-theme\\": \\"'white'\\"
            },
            CoverView: {
                \\"marker-id\\": _empty,
                slot: _empty
            },
            Editor: {
                \\"read-only\\": _false,
                placeholder: _empty,
                \\"show-img-size\\": _false,
                \\"show-img-toolbar\\": _false,
                \\"show-img-resize\\": _false,
                focus: _false,
                bindReady: _empty,
                bindFocus: _empty,
                bindBlur: _empty,
                bindInput: _empty,
                bindStatusChange: _empty,
                name: _empty
            },
            MatchMedia: {
                \\"min-width\\": _empty,
                \\"max-width\\": _empty,
                width: _empty,
                \\"min-height\\": _empty,
                \\"max-height\\": _empty,
                height: _empty,
                orientation: _empty
            },
            FunctionalPageNavigator: {
                version: \\"'release'\\",
                name: _empty,
                args: _empty,
                bindSuccess: _empty,
                bindFail: _empty,
                bindCancel: _empty
            },
            LivePusher: {
                url: _empty,
                mode: \\"'RTC'\\",
                autopush: _false,
                muted: _false,
                \\"enable-camera\\": _true,
                \\"auto-focus\\": _true,
                orientation: \\"'vertical'\\",
                beauty: _zero,
                whiteness: _zero,
                aspect: \\"'9:16'\\",
                \\"min-bitrate\\": \\"200\\",
                \\"max-bitrate\\": \\"1000\\",
                \\"audio-quality\\": \\"'high'\\",
                \\"waiting-image\\": _empty,
                \\"waiting-image-hash\\": _empty,
                zoom: _false,
                \\"device-position\\": \\"'front'\\",
                \\"background-mute\\": _false,
                mirror: _false,
                \\"remote-mirror\\": _false,
                \\"local-mirror\\": _false,
                \\"audio-reverb-type\\": _zero,
                \\"enable-mic\\": _true,
                \\"enable-agc\\": _false,
                \\"enable-ans\\": _false,
                \\"audio-volume-type\\": \\"'voicecall'\\",
                \\"video-width\\": \\"360\\",
                \\"video-height\\": \\"640\\",
                \\"beauty-style\\": \\"'smooth'\\",
                filter: \\"'standard'\\",
                animation: _empty,
                bindStateChange: _empty,
                bindNetStatus: _empty,
                bindBgmStart: _empty,
                bindBgmProgress: _empty,
                bindBgmComplete: _empty,
                bindAudioVolumeNotify: _empty
            },
            OfficialAccount: {
                bindLoad: _empty,
                bindError: _empty
            },
            OpenData: {
                type: _empty,
                \\"open-gid\\": _empty,
                lang: \\"'en'\\",
                \\"default-text\\": _empty,
                \\"default-avatar\\": _empty,
                bindError: _empty
            },
            NavigationBar: {
                title: _empty,
                loading: _false,
                \\"front-color\\": _empty,
                \\"background-color\\": _empty,
                \\"color-animation-duration\\": _zero,
                \\"color-animation-timing-func\\": \\"'linear'\\"
            },
            PageMeta: {
                \\"background-text-style\\": _empty,
                \\"background-color\\": _empty,
                \\"background-color-top\\": _empty,
                \\"background-color-bottom\\": _empty,
                \\"scroll-top\\": \\"''\\",
                \\"scroll-duration\\": \\"300\\",
                \\"page-style\\": \\"''\\",
                \\"root-font-size\\": \\"''\\",
                bindResize: _empty,
                bindScroll: _empty,
                bindScrollDone: _empty
            },
            VoipRoom: {
                openid: _empty,
                mode: \\"'camera'\\",
                \\"device-position\\": \\"'front'\\",
                bindError: _empty
            },
            AdCustom: {
                \\"unit-id\\": _empty,
                \\"ad-intervals\\": _empty,
                bindLoad: _empty,
                bindError: _empty
            },
            PageContainer: {
                show: _false,
                duration: \\"300\\",
                \\"z-index\\": \\"100\\",
                overlay: _true,
                position: \\"'bottom'\\",
                round: _false,
                \\"close-on-slideDown\\": _false,
                \\"overlay-style\\": _empty,
                \\"custom-style\\": _empty,
                bindBeforeEnter: _empty,
                bindEnter: _empty,
                bindAfterEnter: _empty,
                bindBeforeLeave: _empty,
                bindLeave: _empty,
                bindAfterLeave: _empty,
                bindClickOverlay: _empty
            },
            ShareElement: {
                mapkey: _empty,
                transform: _false,
                duration: \\"300\\",
                \\"easing-function\\": \\"'ease-out'\\"
            },
            KeyboardAccessory: {}
        };
        const hostConfig = {
            initNativeApi: initNativeApi
        };
        Object(mocks_taro[\\"mergeReconciler\\"])(hostConfig);
        Object(mocks_taro[\\"mergeInternalComponents\\"])(components);
        var taro_runtime = __webpack_require__(0);
        const reactMeta = {
            PageContext: mocks_taro[\\"EMPTY_OBJ\\"],
            R: mocks_taro[\\"EMPTY_OBJ\\"]
        };
        const HOOKS_APP_ID = \\"taro-app\\";
        function isClassComponent(R, component) {
            var _a;
            const prototype = component.prototype;
            if ((_a = component.displayName) === null || _a === void 0 ? void 0 : _a.includes(\\"Connect\\")) return false;
            return Object(mocks_taro[\\"isFunction\\"])(component.render) || !!(prototype === null || prototype === void 0 ? void 0 : prototype.isReactComponent) || prototype instanceof R.Component;
        }
        function ensureIsArray(item) {
            if (Object(mocks_taro[\\"isArray\\"])(item)) {
                return item;
            } else {
                return item ? [ item ] : [];
            }
        }
        function setDefaultDescriptor(obj) {
            obj.writable = true;
            obj.enumerable = true;
            return obj;
        }
        function setRouterParams(options) {
            taro_runtime[\\"Current\\"].router = Object.assign({
                params: options === null || options === void 0 ? void 0 : options.query
            }, options);
        }
        const taroHooks = lifecycle => fn => {
            const {R: React, PageContext: PageContext} = reactMeta;
            const id = React.useContext(PageContext) || HOOKS_APP_ID;
            const fnRef = React.useRef(fn);
            if (fnRef.current !== fn) fnRef.current = fn;
            React.useLayoutEffect(() => {
                let inst = Object(taro_runtime[\\"getPageInstance\\"])(id);
                let first = false;
                if (inst == null) {
                    first = true;
                    inst = Object.create(null);
                }
                inst = inst;
                const callback = (...args) => fnRef.current(...args);
                if (Object(mocks_taro[\\"isFunction\\"])(inst[lifecycle])) {
                    inst[lifecycle] = [ inst[lifecycle], callback ];
                } else {
                    inst[lifecycle] = [ ...inst[lifecycle] || [], callback ];
                }
                if (first) {
                    Object(taro_runtime[\\"injectPageInstance\\"])(inst, id);
                }
                return () => {
                    const inst = Object(taro_runtime[\\"getPageInstance\\"])(id);
                    const list = inst[lifecycle];
                    if (list === callback) {
                        inst[lifecycle] = undefined;
                    } else if (Object(mocks_taro[\\"isArray\\"])(list)) {
                        inst[lifecycle] = list.filter(item => item !== callback);
                    }
                };
            }, []);
        };
        const useDidShow = taroHooks(\\"componentDidShow\\");
        const useDidHide = taroHooks(\\"componentDidHide\\");
        const usePullDownRefresh = taroHooks(\\"onPullDownRefresh\\");
        const useReachBottom = taroHooks(\\"onReachBottom\\");
        const usePageScroll = taroHooks(\\"onPageScroll\\");
        const useResize = taroHooks(\\"onResize\\");
        const useShareAppMessage = taroHooks(\\"onShareAppMessage\\");
        const useTabItemTap = taroHooks(\\"onTabItemTap\\");
        const useTitleClick = taroHooks(\\"onTitleClick\\");
        const useOptionMenuClick = taroHooks(\\"onOptionMenuClick\\");
        const usePullIntercept = taroHooks(\\"onPullIntercept\\");
        const useShareTimeline = taroHooks(\\"onShareTimeline\\");
        const useAddToFavorites = taroHooks(\\"onAddToFavorites\\");
        const useReady = taroHooks(\\"onReady\\");
        const useRouter = (dynamic = false) => {
            const React = reactMeta.R;
            return dynamic ? taro_runtime[\\"Current\\"].router : React.useMemo(() => taro_runtime[\\"Current\\"].router, []);
        };
        const useScope = () => undefined;
        var taroHooks$1 = Object.freeze({
            __proto__: null,
            useDidShow: useDidShow,
            useDidHide: useDidHide,
            usePullDownRefresh: usePullDownRefresh,
            useReachBottom: useReachBottom,
            usePageScroll: usePageScroll,
            useResize: useResize,
            useShareAppMessage: useShareAppMessage,
            useTabItemTap: useTabItemTap,
            useTitleClick: useTitleClick,
            useOptionMenuClick: useOptionMenuClick,
            usePullIntercept: usePullIntercept,
            useShareTimeline: useShareTimeline,
            useAddToFavorites: useAddToFavorites,
            useReady: useReady,
            useRouter: useRouter,
            useScope: useScope
        });
        let h$1;
        let ReactDOM$1;
        const pageKeyId = Object(taro_runtime[\\"incrementId\\"])();
        const hooks$1 = taro_runtime[\\"container\\"].get(taro_runtime[\\"SERVICE_IDENTIFIER\\"].Hooks);
        function setReconciler(ReactDOM) {
            var _a;
            hooks$1.getLifecycle = function(instance, lifecycle) {
                lifecycle = lifecycle.replace(/^on(Show|Hide)$/, \\"componentDid$1\\");
                return instance[lifecycle];
            };
            (_a = hooks$1.modifyMpEventImpls) === null || _a === void 0 ? void 0 : _a.push((function(event) {
                event.type = event.type.replace(/-/g, \\"\\");
            }));
            hooks$1.batchedEventUpdates = function(cb) {
                ReactDOM.unstable_batchedUpdates(cb);
            };
            hooks$1.mergePageInstance = function(prev, next) {
                if (!prev || !next) return;
                if (\\"constructor\\" in prev) return;
                Object.keys(prev).forEach(item => {
                    const prevList = prev[item];
                    const nextList = ensureIsArray(next[item]);
                    next[item] = nextList.concat(prevList);
                });
            };
            if (false) {}
        }
        function connectReactPage(R, id) {
            return Page => {
                const isReactComponent = isClassComponent(R, Page);
                const inject = node => node && Object(taro_runtime[\\"injectPageInstance\\"])(node, id);
                const refs = isReactComponent ? {
                    ref: inject
                } : {
                    forwardedRef: inject,
                    reactReduxForwardedRef: inject
                };
                if (reactMeta.PageContext === mocks_taro[\\"EMPTY_OBJ\\"]) {
                    reactMeta.PageContext = R.createContext(\\"\\");
                }
                return class PageWrapper extends R.Component {
                    constructor() {
                        super(...arguments);
                        this.state = {
                            hasError: false
                        };
                    }
                    static getDerivedStateFromError(error) {
                        false && false;
                        return {
                            hasError: true
                        };
                    }
                    componentDidCatch(error, info) {
                        if (false) {}
                    }
                    render() {
                        const children = this.state.hasError ? [] : h$1(reactMeta.PageContext.Provider, {
                            value: id
                        }, h$1(Page, Object.assign(Object.assign({}, this.props), refs)));
                        if (false) {} else {
                            return h$1(\\"root\\", {
                                id: id
                            }, children);
                        }
                    }
                };
            };
        }
        function createReactApp(App, react, dom, config) {
            var _a;
            if (false) {}
            reactMeta.R = react;
            h$1 = react.createElement;
            ReactDOM$1 = dom;
            const appInstanceRef = react.createRef();
            const isReactComponent = isClassComponent(react, App);
            let appWrapper;
            setReconciler(ReactDOM$1);
            function getAppInstance() {
                return appInstanceRef.current;
            }
            class AppWrapper extends react.Component {
                constructor() {
                    super(...arguments);
                    this.pages = [];
                    this.elements = [];
                }
                mount(pageComponent, id, cb) {
                    const pageWrapper = connectReactPage(react, id)(pageComponent);
                    const key = id + pageKeyId();
                    const page = () => h$1(pageWrapper, {
                        key: key,
                        tid: id
                    });
                    this.pages.push(page);
                    this.forceUpdate(cb);
                }
                unmount(id, cb) {
                    const elements = this.elements;
                    const idx = elements.findIndex(item => item.props.tid === id);
                    elements.splice(idx, 1);
                    this.forceUpdate(cb);
                }
                render() {
                    const {pages: pages, elements: elements} = this;
                    while (pages.length > 0) {
                        const page = pages.pop();
                        elements.push(page());
                    }
                    let props = null;
                    if (isReactComponent) {
                        props = {
                            ref: appInstanceRef
                        };
                    }
                    return h$1(App, props, false ? undefined : elements.slice());
                }
            }
            if (true) {
                appWrapper = (_a = ReactDOM$1.render) === null || _a === void 0 ? void 0 : _a.call(ReactDOM$1, h$1(AppWrapper), taro_runtime[\\"document\\"].getElementById(\\"app\\"));
            }
            const [ONLAUNCH, ONSHOW, ONHIDE] = hooks$1.getMiniLifecycleImpl().app;
            const appObj = Object.create({
                render(cb) {
                    appWrapper.forceUpdate(cb);
                },
                mount(component, id, cb) {
                    appWrapper.mount(component, id, cb);
                },
                unmount(id, cb) {
                    appWrapper.unmount(id, cb);
                }
            }, {
                config: setDefaultDescriptor({
                    configurable: true,
                    value: config
                }),
                [ONLAUNCH]: setDefaultDescriptor({
                    value(options) {
                        var _a, _b;
                        setRouterParams(options);
                        if (false) {}
                        const app = getAppInstance();
                        this.$app = app;
                        if (app) {
                            if (app.taroGlobalData) {
                                const globalData = app.taroGlobalData;
                                const keys = Object.keys(globalData);
                                const descriptors = Object.getOwnPropertyDescriptors(globalData);
                                keys.forEach(key => {
                                    Object.defineProperty(this, key, {
                                        configurable: true,
                                        enumerable: true,
                                        get() {
                                            return globalData[key];
                                        },
                                        set(value) {
                                            globalData[key] = value;
                                        }
                                    });
                                });
                                Object.defineProperties(this, descriptors);
                            }
                            (_b = app.onLaunch) === null || _b === void 0 ? void 0 : _b.call(app, options);
                        }
                    }
                }),
                [ONSHOW]: setDefaultDescriptor({
                    value(options) {
                        var _a;
                        setRouterParams(options);
                        const app = getAppInstance();
                        (_a = app === null || app === void 0 ? void 0 : app.componentDidShow) === null || _a === void 0 ? void 0 : _a.call(app, options);
                        triggerAppHook(\\"onShow\\", options);
                    }
                }),
                [ONHIDE]: setDefaultDescriptor({
                    value() {
                        var _a;
                        const app = getAppInstance();
                        (_a = app === null || app === void 0 ? void 0 : app.componentDidHide) === null || _a === void 0 ? void 0 : _a.call(app);
                        triggerAppHook(\\"onHide\\");
                    }
                }),
                onPageNotFound: setDefaultDescriptor({
                    value(res) {
                        var _a;
                        const app = getAppInstance();
                        (_a = app === null || app === void 0 ? void 0 : app.onPageNotFound) === null || _a === void 0 ? void 0 : _a.call(app, res);
                    }
                })
            });
            function triggerAppHook(lifecycle, ...option) {
                const instance = Object(taro_runtime[\\"getPageInstance\\"])(HOOKS_APP_ID);
                if (instance) {
                    const app = getAppInstance();
                    const func = hooks$1.getLifecycle(instance, lifecycle);
                    if (Array.isArray(func)) {
                        func.forEach(cb => cb.apply(app, option));
                    }
                }
            }
            taro_runtime[\\"Current\\"].app = appObj;
            return appObj;
        }
        const getNativeCompId = Object(taro_runtime[\\"incrementId\\"])();
        let h;
        let runtime_ReactDOM;
        function initNativeComponentEntry(R, ReactDOM) {
            class NativeComponentWrapper extends R.Component {
                constructor() {
                    super(...arguments);
                    this.root = R.createRef();
                    this.ctx = this.props.getCtx();
                }
                componentDidMount() {
                    this.ctx.component = this;
                    const rootElement = this.root.current;
                    rootElement.ctx = this.ctx;
                    rootElement.performUpdate(true);
                }
                render() {
                    return h(\\"root\\", {
                        ref: this.root
                    }, this.props.renderComponent(this.ctx));
                }
            }
            class Entry extends R.Component {
                constructor() {
                    super(...arguments);
                    this.state = {
                        components: []
                    };
                }
                componentDidMount() {
                    taro_runtime[\\"Current\\"].app = this;
                }
                mount(Component, compId, getCtx) {
                    const isReactComponent = isClassComponent(R, Component);
                    const inject = node => node && Object(taro_runtime[\\"injectPageInstance\\"])(node, compId);
                    const refs = isReactComponent ? {
                        ref: inject
                    } : {
                        forwardedRef: inject,
                        reactReduxForwardedRef: inject
                    };
                    if (reactMeta.PageContext === mocks_taro[\\"EMPTY_OBJ\\"]) {
                        reactMeta.PageContext = R.createContext(\\"\\");
                    }
                    const item = {
                        compId: compId,
                        element: h(NativeComponentWrapper, {
                            key: compId,
                            getCtx: getCtx,
                            renderComponent(ctx) {
                                return h(reactMeta.PageContext.Provider, {
                                    value: compId
                                }, h(Component, Object.assign(Object.assign(Object.assign({}, (ctx.data || (ctx.data = {})).props), refs), {
                                    $scope: ctx
                                })));
                            }
                        })
                    };
                    this.setState({
                        components: [ ...this.state.components, item ]
                    });
                }
                unmount(compId) {
                    const components = this.state.components;
                    const index = components.findIndex(item => item.compId === compId);
                    const next = [ ...components.slice(0, index), ...components.slice(index + 1) ];
                    this.setState({
                        components: next
                    });
                }
                render() {
                    const components = this.state.components;
                    return components.map(({element: element}) => element);
                }
            }
            setReconciler(ReactDOM);
            const app = taro_runtime[\\"document\\"].getElementById(\\"app\\");
            ReactDOM.render(h(Entry, {}), app);
        }
        function createNativeComponentConfig(Component, react, reactdom, componentConfig) {
            var _a, _b;
            reactMeta.R = react;
            h = react.createElement;
            runtime_ReactDOM = reactdom;
            setReconciler(runtime_ReactDOM);
            const componentObj = {
                options: componentConfig,
                properties: {
                    props: {
                        type: null,
                        value: null,
                        observer(_newVal, oldVal) {
                            oldVal && this.component.forceUpdate();
                        }
                    }
                },
                created() {
                    if (!taro_runtime[\\"Current\\"].app) {
                        initNativeComponentEntry(react, runtime_ReactDOM);
                    }
                },
                attached() {
                    setCurrent();
                    this.compId = getNativeCompId();
                    this.config = componentConfig;
                    taro_runtime[\\"Current\\"].app.mount(Component, this.compId, () => this);
                },
                ready() {
                    Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onReady\\");
                },
                detached() {
                    taro_runtime[\\"Current\\"].app.unmount(this.compId);
                },
                pageLifetimes: {
                    show(options) {
                        Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onShow\\", options);
                    },
                    hide() {
                        Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onHide\\");
                    }
                },
                methods: {
                    eh: taro_runtime[\\"eventHandler\\"]
                }
            };
            function setCurrent() {
                const pages = getCurrentPages();
                const currentPage = pages[pages.length - 1];
                if (taro_runtime[\\"Current\\"].page === currentPage) return;
                taro_runtime[\\"Current\\"].page = currentPage;
                const route = currentPage.route || currentPage.__route__;
                const router = {
                    params: currentPage.options || {},
                    path: Object(taro_runtime[\\"addLeadingSlash\\"])(route),
                    onReady: \\"\\",
                    onHide: \\"\\",
                    onShow: \\"\\"
                };
                taro_runtime[\\"Current\\"].router = router;
                if (!currentPage.options) {
                    Object.defineProperty(currentPage, \\"options\\", {
                        enumerable: true,
                        configurable: true,
                        get() {
                            return this._optionsValue;
                        },
                        set(value) {
                            router.params = value;
                            this._optionsValue = value;
                        }
                    });
                }
            }
            if (Component.onShareAppMessage || ((_a = Component.prototype) === null || _a === void 0 ? void 0 : _a.onShareAppMessage) || Component.enableShareAppMessage) {
                componentObj.methods.onShareAppMessage = function(options) {
                    const target = options === null || options === void 0 ? void 0 : options.target;
                    if (target) {
                        const id = target.id;
                        const element = taro_runtime[\\"document\\"].getElementById(id);
                        if (element) {
                            target.dataset = element.dataset;
                        }
                    }
                    return Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onShareAppMessage\\", options);
                };
            }
            if (Component.onShareTimeline || ((_b = Component.prototype) === null || _b === void 0 ? void 0 : _b.onShareTimeline) || Component.enableShareTimeline) {
                componentObj.methods.onShareTimeline = function() {
                    return Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onShareTimeline\\");
                };
            }
            return componentObj;
        }
        var runtime_a;
        const hooks = taro_runtime[\\"container\\"].get(taro_runtime[\\"SERVICE_IDENTIFIER\\"].Hooks);
        hooks.initNativeApiImpls || (hooks.initNativeApiImpls = []);
        hooks.initNativeApiImpls.push((function(taro) {
            for (const hook in taroHooks$1) {
                taro[hook] = taroHooks$1[hook];
            }
        }));
        if (false) {}
        var lib_src_app = __webpack_require__(4);
        var app_default = __webpack_require__.n(lib_src_app);
        var mocks_react = __webpack_require__(2);
        var taro_react = __webpack_require__(5);
        var taro_react_default = __webpack_require__.n(taro_react);
        var app_config = {
            pages: [ \\"pages/index/index\\", \\"pages/native/native\\" ],
            window: {
                backgroundTextStyle: \\"light\\",
                navigationBarBackgroundColor: \\"#fff\\",
                navigationBarTitleText: \\"WeChat\\",
                navigationBarTextStyle: \\"black\\"
            }
        };
        taro_runtime[\\"window\\"].__taroAppConfig = app_config;
        var app_inst = App(createReactApp(app_default.a, mocks_react, taro_react_default.a, app_config));
        Object(mocks_taro[\\"initPxTransform\\"])({
            designWidth: 750,
            deviceRatio: {
                640: 1.17,
                750: 1,
                828: .905
            }
        });
    },
    4: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        var _interopRequireDefault = __webpack_require__(3).default;
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _taro = _interopRequireDefault(__webpack_require__(1));
        var _react = _interopRequireDefault(__webpack_require__(2));
        __webpack_require__(11);
        class App extends _react.default.Component {
            componentDidMount() {}
            componentDidShow() {}
            componentDidHide() {}
            componentCatchError() {}
            render() {
                return this.props.children;
            }
        }
        var _default = App;
        exports.default = _default;
    }
}, [ [ 23, 0, 1, 3, 2 ] ] ]);



/** filePath: dist\\\\comp.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 6 ], {
    12: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        var _runtime = __webpack_require__(0);
        Component((0, _runtime.createRecursiveComponentConfig)());
    }
}, [ [ 12, 0, 1 ] ] ]);

/** filePath: dist\\\\custom-wrapper.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 10 ], {
    13: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        var _runtime = __webpack_require__(0);
        Component((0, _runtime.createRecursiveComponentConfig)(\\"custom-wrapper\\"));
    }
}, [ [ 13, 0, 1 ] ] ]);

/** filePath: dist\\\\app.json **/
{\\"pages\\":[\\"pages/index/index\\",\\"pages/native/native\\"],\\"window\\":{\\"backgroundTextStyle\\":\\"light\\",\\"navigationBarBackgroundColor\\":\\"#fff\\",\\"navigationBarTitleText\\":\\"WeChat\\",\\"navigationBarTextStyle\\":\\"black\\"}}

/** filePath: dist\\\\comp.wxml **/
<import src=\\"./base.wxml\\" />
<template is=\\"tmpl_0_container\\" data=\\"{{i:i,l:l}}\\" />

/** filePath: dist\\\\comp.json **/
{\\"component\\":true,\\"usingComponents\\":{\\"comp\\":\\"./comp\\",\\"custom-wrapper\\":\\"./custom-wrapper\\"}}

/** filePath: dist\\\\custom-wrapper.json **/
{\\"component\\":true,\\"usingComponents\\":{\\"comp\\":\\"./comp\\",\\"custom-wrapper\\":\\"./custom-wrapper\\"}}

/** filePath: dist\\\\base.wxml **/
<wxs module=\\"xs\\" src=\\"./utils.wxs\\" />
<template name=\\"taro_tmpl\\">
  <block wx:for=\\"{{root.cn}}\\" wx:key=\\"sid\\">
    <template is=\\"tmpl_0_container\\" data=\\"{{i:item,l:''}}\\" />
  </block>
</template>

<template name=\\"tmpl_0_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_icon\\">
  <icon type=\\"{{i.type}}\\" size=\\"{{xs.b(i.size,23)}}\\" color=\\"{{i.color}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></icon>
</template>

<template name=\\"tmpl_0_progress\\">
  <progress percent=\\"{{i.percent}}\\" stroke-width=\\"{{xs.b(i.strokeWidth,6)}}\\" color=\\"{{xs.b(i.color,'#09BB07')}}\\" activeColor=\\"{{xs.b(i.activeColor,'#09BB07')}}\\" backgroundColor=\\"{{xs.b(i.backgroundColor,'#EBEBEB')}}\\" active=\\"{{xs.b(i.active,false)}}\\" active-mode=\\"{{xs.b(i.activeMode,'backwards')}}\\" show-info=\\"{{xs.b(i.showInfo,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></progress>
</template>

<template name=\\"tmpl_0_rich-text\\">
  <rich-text nodes=\\"{{xs.b(i.nodes,[])}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></rich-text>
</template>

<template name=\\"tmpl_0_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_0_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_0_button\\">
  <button size=\\"{{xs.b(i.size,'default')}}\\" type=\\"{{i.type}}\\" plain=\\"{{xs.b(i.plain,false)}}\\" disabled=\\"{{i.disabled}}\\" loading=\\"{{xs.b(i.loading,false)}}\\" form-type=\\"{{i.formType}}\\" open-type=\\"{{i.openType}}\\" hover-class=\\"{{xs.b(i.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,70)}}\\" name=\\"{{i.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </button>
</template>

<template name=\\"tmpl_0_checkbox\\">
  <checkbox value=\\"{{i.value}}\\" disabled=\\"{{i.disabled}}\\" checked=\\"{{xs.b(i.checked,false)}}\\" color=\\"{{xs.b(i.color,'#09BB07')}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </checkbox>
</template>

<template name=\\"tmpl_0_checkbox-group\\">
  <checkbox-group bindchange=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </checkbox-group>
</template>

<template name=\\"tmpl_0_form\\">
  <form report-submit=\\"{{xs.b(i.reportSubmit,false)}}\\" bindsubmit=\\"eh\\" bindreset=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </form>
</template>

<template name=\\"tmpl_0_input\\">
  <template is=\\"{{xs.c(i, 'tmpl_0_')}}\\" data=\\"{{i:i}}\\" />
</template>

<template name=\\"tmpl_0_input_focus\\">
  <input value=\\"{{i.value}}\\" type=\\"{{xs.b(i.type,'')}}\\" password=\\"{{xs.b(i.password,false)}}\\" placeholder=\\"{{i.placeholder}}\\" placeholder-style=\\"{{i.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(i.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{i.disabled}}\\" maxlength=\\"{{xs.b(i.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(i.cursorSpacing,0)}}\\" focus=\\"{{xs.b(i.focus,false)}}\\" confirm-type=\\"{{xs.b(i.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(i.confirmHold,false)}}\\" cursor=\\"{{xs.b(i.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(i.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(i.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></input>
</template>

<template name=\\"tmpl_0_input_blur\\">
  <input value=\\"{{i.value}}\\" type=\\"{{xs.b(i.type,'')}}\\" password=\\"{{xs.b(i.password,false)}}\\" placeholder=\\"{{i.placeholder}}\\" placeholder-style=\\"{{i.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(i.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{i.disabled}}\\" maxlength=\\"{{xs.b(i.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(i.cursorSpacing,0)}}\\" confirm-type=\\"{{xs.b(i.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(i.confirmHold,false)}}\\" cursor=\\"{{xs.b(i.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(i.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(i.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></input>
</template>

<template name=\\"tmpl_0_label\\">
  <label for=\\"{{i.for}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </label>
</template>

<template name=\\"tmpl_0_picker\\">
  <picker mode=\\"{{xs.b(i.mode,'selector')}}\\" disabled=\\"{{i.disabled}}\\" range=\\"{{i.range}}\\" range-key=\\"{{i.rangeKey}}\\" value=\\"{{i.value}}\\" start=\\"{{i.start}}\\" end=\\"{{i.end}}\\" fields=\\"{{xs.b(i.fields,'day')}}\\" custom-item=\\"{{i.customItem}}\\" name=\\"{{i.name}}\\" bindcancel=\\"eh\\" bindchange=\\"eh\\" bindcolumnchange=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </picker>
</template>

<template name=\\"tmpl_0_picker-view\\">
  <picker-view value=\\"{{i.value}}\\" indicator-style=\\"{{i.indicatorStyle}}\\" indicator-class=\\"{{i.indicatorClass}}\\" mask-style=\\"{{i.maskStyle}}\\" mask-class=\\"{{i.maskClass}}\\" bindchange=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </picker-view>
</template>

<template name=\\"tmpl_0_picker-view-column\\">
  <picker-view-column name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </picker-view-column>
</template>

<template name=\\"tmpl_0_radio\\">
  <radio value=\\"{{i.value}}\\" checked=\\"{{xs.b(i.checked,false)}}\\" disabled=\\"{{i.disabled}}\\" color=\\"{{xs.b(i.color,'#09BB07')}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </radio>
</template>

<template name=\\"tmpl_0_radio-group\\">
  <radio-group bindchange=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </radio-group>
</template>

<template name=\\"tmpl_0_slider\\">
  <slider min=\\"{{xs.b(i.min,0)}}\\" max=\\"{{xs.b(i.max,100)}}\\" step=\\"{{xs.b(i.step,1)}}\\" disabled=\\"{{i.disabled}}\\" value=\\"{{xs.b(i.value,0)}}\\" activeColor=\\"{{xs.b(i.activeColor,'#1aad19')}}\\" backgroundColor=\\"{{xs.b(i.backgroundColor,'#e9e9e9')}}\\" block-size=\\"{{xs.b(i.blockSize,28)}}\\" block-color=\\"{{xs.b(i.blockColor,'#ffffff')}}\\" show-value=\\"{{xs.b(i.showValue,false)}}\\" bindchange=\\"eh\\" bindchanging=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></slider>
</template>

<template name=\\"tmpl_0_switch\\">
  <switch checked=\\"{{xs.b(i.checked,false)}}\\" disabled=\\"{{i.disabled}}\\" type=\\"{{xs.b(i.type,'switch')}}\\" color=\\"{{xs.b(i.color,'#04BE02')}}\\" bindchange=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></switch>
</template>

<template name=\\"tmpl_0_cover-image\\">
  <cover-image src=\\"{{i.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-image>
</template>

<template name=\\"tmpl_0_textarea\\">
  <template is=\\"{{xs.c(i, 'tmpl_0_')}}\\" data=\\"{{i:i}}\\" />
</template>

<template name=\\"tmpl_0_textarea_focus\\">
  <textarea value=\\"{{i.value}}\\" placeholder=\\"{{i.placeholder}}\\" placeholder-style=\\"{{i.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(i.placeholderClass,'textarea-placeholder')}}\\" disabled=\\"{{i.disabled}}\\" maxlength=\\"{{xs.b(i.maxlength,140)}}\\" auto-focus=\\"{{xs.b(i.autoFocus,false)}}\\" focus=\\"{{xs.b(i.focus,false)}}\\" auto-height=\\"{{xs.b(i.autoHeight,false)}}\\" fixed=\\"{{xs.b(i.fixed,false)}}\\" cursor-spacing=\\"{{xs.b(i.cursorSpacing,0)}}\\" cursor=\\"{{xs.b(i.cursor,-1)}}\\" selection-start=\\"{{xs.b(i.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(i.selectionEnd,-1)}}\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindlinechange=\\"eh\\" bindinput=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></textarea>
</template>

<template name=\\"tmpl_0_textarea_blur\\">
  <textarea value=\\"{{i.value}}\\" placeholder=\\"{{i.placeholder}}\\" placeholder-style=\\"{{i.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(i.placeholderClass,'textarea-placeholder')}}\\" disabled=\\"{{i.disabled}}\\" maxlength=\\"{{xs.b(i.maxlength,140)}}\\" auto-focus=\\"{{xs.b(i.autoFocus,false)}}\\" auto-height=\\"{{xs.b(i.autoHeight,false)}}\\" fixed=\\"{{xs.b(i.fixed,false)}}\\" cursor-spacing=\\"{{xs.b(i.cursorSpacing,0)}}\\" cursor=\\"{{xs.b(i.cursor,-1)}}\\" selection-start=\\"{{xs.b(i.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(i.selectionEnd,-1)}}\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindlinechange=\\"eh\\" bindinput=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></textarea>
</template>

<template name=\\"tmpl_0_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_0_movable-area\\">
  <movable-area scale-area=\\"{{xs.b(i.scaleArea,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </movable-area>
</template>

<template name=\\"tmpl_0_movable-view\\">
  <movable-view direction=\\"{{xs.b(i.direction,none)}}\\" inertia=\\"{{xs.b(i.inertia,false)}}\\" out-of-bounds=\\"{{xs.b(i.outOfBounds,false)}}\\" x=\\"{{i.x}}\\" y=\\"{{i.y}}\\" damping=\\"{{xs.b(i.damping,20)}}\\" friction=\\"{{xs.b(i.friction,2)}}\\" disabled=\\"{{i.disabled}}\\" scale=\\"{{xs.b(i.scale,false)}}\\" scale-min=\\"{{xs.b(i.scaleMin,0.5)}}\\" scale-max=\\"{{xs.b(i.scaleMax,10)}}\\" scale-value=\\"{{xs.b(i.scaleValue,1)}}\\" bindchange=\\"eh\\" bindscale=\\"eh\\" bindhtouchmove=\\"eh\\" bindvtouchmove=\\"eh\\" width=\\"{{xs.b(i.width,'10px')}}\\" height=\\"{{xs.b(i.height,'10px')}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </movable-view>
</template>

<template name=\\"tmpl_0_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_0_swiper\\">
  <swiper indicator-dots=\\"{{xs.b(i.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(i.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(i.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(i.autoplay,false)}}\\" current=\\"{{xs.b(i.current,0)}}\\" interval=\\"{{xs.b(i.interval,5000)}}\\" duration=\\"{{xs.b(i.duration,500)}}\\" circular=\\"{{xs.b(i.circular,false)}}\\" vertical=\\"{{xs.b(i.vertical,false)}}\\" previous-margin=\\"{{xs.b(i.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(i.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(i.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper>
</template>

<template name=\\"tmpl_0_swiper-item\\">
  <swiper-item item-id=\\"{{i.itemId}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper-item>
</template>

<template name=\\"tmpl_0_navigator\\">
  <navigator url=\\"{{i.url}}\\" open-type=\\"{{xs.b(i.openType,'navigate')}}\\" delta=\\"{{xs.b(i.delta,1)}}\\" hover-class=\\"{{xs.b(i.hoverClass,'navigator-hover')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,600)}}\\" bindsuccess=\\"eh\\" bindfail=\\"eh\\" bindcomplete=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </navigator>
</template>

<template name=\\"tmpl_0_audio\\">
  <audio id=\\"{{i.id}}\\" src=\\"{{i.src}}\\" loop=\\"{{xs.b(i.loop,false)}}\\" controls=\\"{{xs.b(i.controls,false)}}\\" poster=\\"{{i.poster}}\\" name=\\"{{i.name}}\\" author=\\"{{i.author}}\\" binderror=\\"eh\\" bindplay=\\"eh\\" bindpause=\\"eh\\" bindtimeupdate=\\"eh\\" bindended=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></audio>
</template>

<template name=\\"tmpl_0_camera\\">
  <camera device-position=\\"{{xs.b(i.devicePosition,'back')}}\\" flash=\\"{{xs.b(i.flash,'auto')}}\\" bindstop=\\"eh\\" binderror=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </camera>
</template>

<template name=\\"tmpl_0_static-image\\">
  <image src=\\"{{i.src}}\\" mode=\\"{{xs.b(i.mode,'scaleToFill')}}\\" lazy-load=\\"{{xs.b(i.lazyLoad,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_0_image\\">
  <image src=\\"{{i.src}}\\" mode=\\"{{xs.b(i.mode,'scaleToFill')}}\\" lazy-load=\\"{{xs.b(i.lazyLoad,false)}}\\" binderror=\\"eh\\" bindload=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_0_live-player\\">
  <live-player src=\\"{{i.src}}\\" autoplay=\\"{{xs.b(i.autoplay,false)}}\\" muted=\\"{{xs.b(i.muted,false)}}\\" orientation=\\"{{xs.b(i.orientation,'vertical')}}\\" object-fit=\\"{{xs.b(i.objectFit,'contain')}}\\" background-mute=\\"{{xs.b(i.backgroundMute,false)}}\\" min-cache=\\"{{xs.b(i.minCache,1)}}\\" max-cache=\\"{{xs.b(i.maxCache,3)}}\\" bindstatechange=\\"eh\\" bindfullscreenchange=\\"eh\\" bindnetstatus=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </live-player>
</template>

<template name=\\"tmpl_0_video\\">
  <video src=\\"{{i.src}}\\" duration=\\"{{i.duration}}\\" controls=\\"{{xs.b(i.controls,true)}}\\" danmu-list=\\"{{i.danmuList}}\\" danmu-btn=\\"{{i.danmuBtn}}\\" enable-danmu=\\"{{i.enableDanmu}}\\" autoplay=\\"{{xs.b(i.autoplay,false)}}\\" loop=\\"{{xs.b(i.loop,false)}}\\" muted=\\"{{xs.b(i.muted,false)}}\\" initial-time=\\"{{xs.b(i.initialTime,0)}}\\" page-gesture=\\"{{xs.b(i.pageGesture,false)}}\\" direction=\\"{{i.direction}}\\" show-progress=\\"{{xs.b(i.showProgress,true)}}\\" show-fullscreen-btn=\\"{{xs.b(i.showFullscreenBtn,true)}}\\" show-play-btn=\\"{{xs.b(i.showPlayBtn,true)}}\\" show-center-play-btn=\\"{{xs.b(i.showCenterPlayBtn,true)}}\\" enable-progress-gesture=\\"{{xs.b(i.enableProgressGesture,true)}}\\" object-fit=\\"{{xs.b(i.objectFit,'contain')}}\\" poster=\\"{{i.poster}}\\" show-mute-btn=\\"{{xs.b(i.showMuteBtn,false)}}\\" bindplay=\\"eh\\" bindpause=\\"eh\\" bindended=\\"eh\\" bindtimeupdate=\\"eh\\" bindfullscreenchange=\\"eh\\" bindwaiting=\\"eh\\" binderror=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </video>
</template>

<template name=\\"tmpl_0_canvas\\">
  <canvas canvas-id=\\"{{i.canvasId}}\\" disable-scroll=\\"{{xs.b(i.disableScroll,false)}}\\" binderror=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </canvas>
</template>

<template name=\\"tmpl_0_ad\\">
  <ad unit-id=\\"{{i.unitId}}\\" ad-intervals=\\"{{i.adIntervals}}\\" bindload=\\"eh\\" binderror=\\"eh\\" bindclose=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></ad>
</template>

<template name=\\"tmpl_0_web-view\\">
  <web-view src=\\"{{i.src}}\\" bindmessage=\\"eh\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </web-view>
</template>

<template name=\\"tmpl_0_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_0_map\\">
  <map longitude=\\"{{i.longitude}}\\" latitude=\\"{{i.latitude}}\\" scale=\\"{{xs.b(i.scale,16)}}\\" markers=\\"{{xs.b(i.markers,[])}}\\" covers=\\"{{i.covers}}\\" polyline=\\"{{xs.b(i.polyline,[])}}\\" circles=\\"{{xs.b(i.circles,[])}}\\" controls=\\"{{xs.b(i.controls,[])}}\\" include-points=\\"{{xs.b(i.includePoints,[])}}\\" show-location=\\"{{i.showLocation}}\\" layer-style=\\"{{xs.b(i.layerStyle,1)}}\\" bindmarkertap=\\"eh\\" bindcontroltap=\\"eh\\" bindcallouttap=\\"eh\\" bindupdated=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </map>
</template>

<template name=\\"tmpl_0_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_#text\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_0_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_0_container\\">
  <template is=\\"{{xs.a(0, i.nn, l)}}\\" data=\\"{{i:i,cid:0,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_1_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_1_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_1_form\\">
  <form report-submit=\\"{{xs.b(i.reportSubmit,false)}}\\" bindsubmit=\\"eh\\" bindreset=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </form>
</template>

<template name=\\"tmpl_1_label\\">
  <label for=\\"{{i.for}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </label>
</template>

<template name=\\"tmpl_1_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_1_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_1_swiper\\">
  <swiper indicator-dots=\\"{{xs.b(i.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(i.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(i.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(i.autoplay,false)}}\\" current=\\"{{xs.b(i.current,0)}}\\" interval=\\"{{xs.b(i.interval,5000)}}\\" duration=\\"{{xs.b(i.duration,500)}}\\" circular=\\"{{xs.b(i.circular,false)}}\\" vertical=\\"{{xs.b(i.vertical,false)}}\\" previous-margin=\\"{{xs.b(i.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(i.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(i.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper>
</template>

<template name=\\"tmpl_1_swiper-item\\">
  <swiper-item item-id=\\"{{i.itemId}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper-item>
</template>

<template name=\\"tmpl_1_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_1_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_1_container\\">
  <template is=\\"{{xs.a(1, i.nn, l)}}\\" data=\\"{{i:i,cid:1,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_2_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_2_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_2_form\\">
  <form report-submit=\\"{{xs.b(i.reportSubmit,false)}}\\" bindsubmit=\\"eh\\" bindreset=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </form>
</template>

<template name=\\"tmpl_2_label\\">
  <label for=\\"{{i.for}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </label>
</template>

<template name=\\"tmpl_2_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_2_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_2_swiper\\">
  <swiper indicator-dots=\\"{{xs.b(i.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(i.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(i.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(i.autoplay,false)}}\\" current=\\"{{xs.b(i.current,0)}}\\" interval=\\"{{xs.b(i.interval,5000)}}\\" duration=\\"{{xs.b(i.duration,500)}}\\" circular=\\"{{xs.b(i.circular,false)}}\\" vertical=\\"{{xs.b(i.vertical,false)}}\\" previous-margin=\\"{{xs.b(i.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(i.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(i.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper>
</template>

<template name=\\"tmpl_2_swiper-item\\">
  <swiper-item item-id=\\"{{i.itemId}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper-item>
</template>

<template name=\\"tmpl_2_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_2_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_2_container\\">
  <template is=\\"{{xs.a(2, i.nn, l)}}\\" data=\\"{{i:i,cid:2,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_3_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_3_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_3_form\\">
  <form report-submit=\\"{{xs.b(i.reportSubmit,false)}}\\" bindsubmit=\\"eh\\" bindreset=\\"eh\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </form>
</template>

<template name=\\"tmpl_3_label\\">
  <label for=\\"{{i.for}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </label>
</template>

<template name=\\"tmpl_3_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_3_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_3_swiper\\">
  <swiper indicator-dots=\\"{{xs.b(i.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(i.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(i.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(i.autoplay,false)}}\\" current=\\"{{xs.b(i.current,0)}}\\" interval=\\"{{xs.b(i.interval,5000)}}\\" duration=\\"{{xs.b(i.duration,500)}}\\" circular=\\"{{xs.b(i.circular,false)}}\\" vertical=\\"{{xs.b(i.vertical,false)}}\\" previous-margin=\\"{{xs.b(i.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(i.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(i.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper>
</template>

<template name=\\"tmpl_3_swiper-item\\">
  <swiper-item item-id=\\"{{i.itemId}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </swiper-item>
</template>

<template name=\\"tmpl_3_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_3_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_3_container\\">
  <template is=\\"{{xs.a(3, i.nn, l)}}\\" data=\\"{{i:i,cid:3,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_4_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_4_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_4_label\\">
  <label for=\\"{{i.for}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </label>
</template>

<template name=\\"tmpl_4_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_4_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_4_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_4_container\\">
  <template is=\\"{{xs.a(4, i.nn, l)}}\\" data=\\"{{i:i,cid:4,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_5_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_5_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_5_label\\">
  <label for=\\"{{i.for}}\\" name=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </label>
</template>

<template name=\\"tmpl_5_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_5_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_5_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_5_container\\">
  <template is=\\"{{xs.a(5, i.nn, l)}}\\" data=\\"{{i:i,cid:5,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_6_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_6_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_6_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_6_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_6_container\\">
  <template is=\\"{{xs.a(6, i.nn, l)}}\\" data=\\"{{i:i,cid:6,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_7_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_7_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_7_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_7_slot\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_slot-view\\">
  <view slot=\\"{{i.name}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_7_container\\">
  <template is=\\"{{xs.a(7, i.nn, l)}}\\" data=\\"{{i:i,cid:7,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_8_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_8_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_8_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_8_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_8_container\\">
  <template is=\\"{{xs.a(8, i.nn, l)}}\\" data=\\"{{i:i,cid:8,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_9_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_9_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_9_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_9_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_9_container\\">
  <template is=\\"{{xs.a(9, i.nn, l)}}\\" data=\\"{{i:i,cid:9,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_10_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_10_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_10_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_10_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_10_container\\">
  <template is=\\"{{xs.a(10, i.nn, l)}}\\" data=\\"{{i:i,cid:10,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_11_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_11_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_11_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_11_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_11_container\\">
  <template is=\\"{{xs.a(11, i.nn, l)}}\\" data=\\"{{i:i,cid:11,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_12_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_12_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_12_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_12_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_12_container\\">
  <template is=\\"{{xs.a(12, i.nn, l)}}\\" data=\\"{{i:i,cid:12,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_13_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_13_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_13_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_13_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_13_container\\">
  <template is=\\"{{xs.a(13, i.nn, l)}}\\" data=\\"{{i:i,cid:13,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_14_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_14_cover-view\\">
  <cover-view scroll-top=\\"{{xs.b(i.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_14_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_14_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_14_container\\">
  <template is=\\"{{xs.a(14, i.nn, l)}}\\" data=\\"{{i:i,cid:14,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_15_container\\">
  <block wx:if=\\"{{i.nn === '#text'}}\\">
    <template is=\\"tmpl_0_#text\\" data=\\"{{i:i}}\\" />
  </block>
  <block wx:else>
    <comp i=\\"{{i}}\\" l=\\"{{l}}\\" />
  </block>
</template>


/** filePath: dist\\\\custom-wrapper.wxml **/
<import src=\\"./base.wxml\\" />
  <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
    <template is=\\"tmpl_0_container\\" data=\\"{{i:item,l:''}}\\" />
  </block>

/** filePath: dist\\\\utils.wxs **/
module.exports = {
  a: function (l, n, s) {
    var a = [\\"view\\",\\"catch-view\\",\\"cover-view\\",\\"static-view\\",\\"pure-view\\",\\"block\\",\\"text\\",\\"static-text\\",\\"slot\\",\\"slot-view\\",\\"label\\",\\"form\\",\\"scroll-view\\",\\"swiper\\",\\"swiper-item\\",\\"tab\\"]
    var b = [\\"static-text\\",\\"slot\\",\\"slot-view\\",\\"label\\",\\"form\\",\\"scroll-view\\",\\"swiper\\",\\"swiper-item\\"]
    if (a.indexOf(n) === -1) {
      l = 0
    }
    if (b.indexOf(n) > -1) {
      var u = s.split(',')
      var depth = 0
      for (var i = 0; i < u.length; i++) {
        if (u[i] === n) depth++
      }
      l = depth
    }
    return 'tmpl_' + l + '_' + n
  },
  b: function (a, b) {
    return a === undefined ? b : a
  },
  c: function(i, prefix) {
    var s = i.focus !== undefined ? 'focus' : 'blur'
    return prefix + i.nn + '_' + s
  },
  d: function (i, v) {
    return i === undefined ? v : i
  },
  e: function (n) {
    return 'tmpl_' + n + '_container'
  },
  f: function (l, n) {
    var b = [\\"static-text\\",\\"slot\\",\\"slot-view\\",\\"label\\",\\"form\\",\\"scroll-view\\",\\"swiper\\",\\"swiper-item\\"]
    if (b.indexOf(n) > -1) {
      if (l) l += ','
      l += n
    }
    return l
  }
}
"
`;
