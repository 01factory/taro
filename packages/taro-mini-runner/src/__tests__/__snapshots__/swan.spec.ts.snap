// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`swan should build swan app 1`] = `16`;

exports[`swan should build swan app 2`] = `
"
/** filePath: dist\\\\runtime.js **/
(function(modules) {
    function webpackJsonpCallback(data) {
        var chunkIds = data[0];
        var moreModules = data[1];
        var executeModules = data[2];
        var moduleId, chunkId, i = 0, resolves = [];
        for (;i < chunkIds.length; i++) {
            chunkId = chunkIds[i];
            if (Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
                resolves.push(installedChunks[chunkId][0]);
            }
            installedChunks[chunkId] = 0;
        }
        for (moduleId in moreModules) {
            if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
                modules[moduleId] = moreModules[moduleId];
            }
        }
        if (parentJsonpFunction) parentJsonpFunction(data);
        while (resolves.length) {
            resolves.shift()();
        }
        deferredModules.push.apply(deferredModules, executeModules || []);
        return checkDeferredModules();
    }
    function checkDeferredModules() {
        var result;
        for (var i = 0; i < deferredModules.length; i++) {
            var deferredModule = deferredModules[i];
            var fulfilled = true;
            for (var j = 1; j < deferredModule.length; j++) {
                var depId = deferredModule[j];
                if (installedChunks[depId] !== 0) fulfilled = false;
            }
            if (fulfilled) {
                deferredModules.splice(i--, 1);
                result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
            }
        }
        return result;
    }
    var installedModules = {};
    var installedChunks = {
        0: 0
    };
    var deferredModules = [];
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.r = function(exports) {
        if (typeof Symbol !== \\"undefined\\" && Symbol.toStringTag) {
            Object.defineProperty(exports, Symbol.toStringTag, {
                value: \\"Module\\"
            });
        }
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
    };
    __webpack_require__.t = function(value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === \\"object\\" && value && value.__esModule) return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, \\"default\\", {
            enumerable: true,
            value: value
        });
        if (mode & 2 && typeof value != \\"string\\") for (var key in value) __webpack_require__.d(ns, key, function(key) {
            return value[key];
        }.bind(null, key));
        return ns;
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module[\\"default\\"];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, \\"a\\", getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = \\"/\\";
    var jsonpArray = swan[\\"webpackJsonp\\"] = swan[\\"webpackJsonp\\"] || [];
    var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
    jsonpArray.push = webpackJsonpCallback;
    jsonpArray = jsonpArray.slice();
    for (var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
    var parentJsonpFunction = oldJsonpFunction;
    checkDeferredModules();
})([]);

/** filePath: dist\\\\taro.js **/
(swan[\\"webpackJsonp\\"] = swan[\\"webpackJsonp\\"] || []).push([ [ 1 ], {
    0: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _default = \\"taro-runtime-mock\\";
        exports.default = _default;
    },
    16: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _default = \\"taro-components-mock\\";
        exports.default = _default;
    },
    6: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _default = \\"taro-react-mock\\";
        exports.default = _default;
    }
} ]);

/** filePath: dist\\\\common.js **/
(swan[\\"webpackJsonp\\"] = swan[\\"webpackJsonp\\"] || []).push([ [ 2 ], {
    2: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _default = \\"react-mock\\";
        exports.default = _default;
    }
} ]);

/** filePath: dist\\\\vendors.js **/
(swan[\\"webpackJsonp\\"] = swan[\\"webpackJsonp\\"] || []).push([ [ 3 ], {
    12: function(module, exports) {
        function _typeof(obj) {
            \\"@babel/helpers - typeof\\";
            return module.exports = _typeof = \\"function\\" == typeof Symbol && \\"symbol\\" == typeof Symbol.iterator ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && \\"function\\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj;
            }, module.exports.__esModule = true, module.exports[\\"default\\"] = module.exports, 
            _typeof(obj);
        }
        module.exports = _typeof, module.exports.__esModule = true, module.exports[\\"default\\"] = module.exports;
    },
    3: function(module, exports, __webpack_require__) {
        var _typeof = __webpack_require__(12)[\\"default\\"];
        function _getRequireWildcardCache(nodeInterop) {
            if (typeof WeakMap !== \\"function\\") return null;
            var cacheBabelInterop = new WeakMap;
            var cacheNodeInterop = new WeakMap;
            return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
                return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
            })(nodeInterop);
        }
        function _interopRequireWildcard(obj, nodeInterop) {
            if (!nodeInterop && obj && obj.__esModule) {
                return obj;
            }
            if (obj === null || _typeof(obj) !== \\"object\\" && typeof obj !== \\"function\\") {
                return {
                    default: obj
                };
            }
            var cache = _getRequireWildcardCache(nodeInterop);
            if (cache && cache.has(obj)) {
                return cache.get(obj);
            }
            var newObj = {};
            var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var key in obj) {
                if (key !== \\"default\\" && Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                    if (desc && (desc.get || desc.set)) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
            newObj[\\"default\\"] = obj;
            if (cache) {
                cache.set(obj, newObj);
            }
            return newObj;
        }
        module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports[\\"default\\"] = module.exports;
    }
} ]);

/** filePath: dist\\\\app.css **/


/** filePath: dist\\\\app.js **/
require(\\"./runtime\\");

require(\\"./common\\");

require(\\"./vendors\\");

require(\\"./taro\\");

(swan[\\"webpackJsonp\\"] = swan[\\"webpackJsonp\\"] || []).push([ [ 4 ], [ , function(module, exports, __webpack_require__) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
        value: true
    });
    exports.default = exports.EMPTY_OBJ = void 0;
    exports.isArray = isArray;
    exports.isFunction = isFunction;
    exports.mergeInternalComponents = mergeInternalComponents;
    exports.mergeReconciler = mergeReconciler;
    exports.processApis = processApis;
    var _default = \\"taro\\";
    exports.default = _default;
    function mergeReconciler() {}
    function mergeInternalComponents() {}
    function isFunction() {}
    function isArray() {}
    function processApis() {}
    const EMPTY_OBJ = {};
    exports.EMPTY_OBJ = EMPTY_OBJ;
}, , , function(module, exports, __webpack_require__) {
    \\"use strict\\";
    Object.defineProperty(exports, \\"__esModule\\", {
        value: true
    });
    exports.connectReactPage = connectReactPage;
    exports.createNativeComponentConfig = createNativeComponentConfig;
    exports.createReactApp = createReactApp;
    exports.setReconciler = setReconciler;
    exports.useTitleClick = exports.useTabItemTap = exports.useShareTimeline = exports.useShareAppMessage = exports.useScope = exports.useRouter = exports.useResize = exports.useReady = exports.useReachBottom = exports.usePullIntercept = exports.usePullDownRefresh = exports.usePageScroll = exports.useOptionMenuClick = exports.useDidShow = exports.useDidHide = exports.useAddToFavorites = void 0;
    var _runtime = __webpack_require__(0);
    var _shared = __webpack_require__(1);
    const reactMeta = {
        PageContext: _shared.EMPTY_OBJ,
        R: _shared.EMPTY_OBJ
    };
    const HOOKS_APP_ID = \\"taro-app\\";
    function isClassComponent(R, component) {
        var _a;
        const prototype = component.prototype;
        if ((_a = component.displayName) === null || _a === void 0 ? void 0 : _a.includes(\\"Connect\\")) return false;
        return (0, _shared.isFunction)(component.render) || !!(prototype === null || prototype === void 0 ? void 0 : prototype.isReactComponent) || prototype instanceof R.Component;
    }
    function ensureIsArray(item) {
        if ((0, _shared.isArray)(item)) {
            return item;
        } else {
            return item ? [ item ] : [];
        }
    }
    function setDefaultDescriptor(obj) {
        obj.writable = true;
        obj.enumerable = true;
        return obj;
    }
    function setRouterParams(options) {
        _runtime.Current.router = Object.assign({
            params: options === null || options === void 0 ? void 0 : options.query
        }, options);
    }
    const taroHooks = lifecycle => fn => {
        const {R: React, PageContext: PageContext} = reactMeta;
        const id = React.useContext(PageContext) || HOOKS_APP_ID;
        const fnRef = React.useRef(fn);
        if (fnRef.current !== fn) fnRef.current = fn;
        React.useLayoutEffect(() => {
            let inst = (0, _runtime.getPageInstance)(id);
            let first = false;
            if (inst == null) {
                first = true;
                inst = Object.create(null);
            }
            inst = inst;
            const callback = (...args) => fnRef.current(...args);
            if ((0, _shared.isFunction)(inst[lifecycle])) {
                inst[lifecycle] = [ inst[lifecycle], callback ];
            } else {
                inst[lifecycle] = [ ...inst[lifecycle] || [], callback ];
            }
            if (first) {
                (0, _runtime.injectPageInstance)(inst, id);
            }
            return () => {
                const inst = (0, _runtime.getPageInstance)(id);
                const list = inst[lifecycle];
                if (list === callback) {
                    inst[lifecycle] = undefined;
                } else if ((0, _shared.isArray)(list)) {
                    inst[lifecycle] = list.filter(item => item !== callback);
                }
            };
        }, []);
    };
    const useDidShow = taroHooks(\\"componentDidShow\\");
    exports.useDidShow = useDidShow;
    const useDidHide = taroHooks(\\"componentDidHide\\");
    exports.useDidHide = useDidHide;
    const usePullDownRefresh = taroHooks(\\"onPullDownRefresh\\");
    exports.usePullDownRefresh = usePullDownRefresh;
    const useReachBottom = taroHooks(\\"onReachBottom\\");
    exports.useReachBottom = useReachBottom;
    const usePageScroll = taroHooks(\\"onPageScroll\\");
    exports.usePageScroll = usePageScroll;
    const useResize = taroHooks(\\"onResize\\");
    exports.useResize = useResize;
    const useShareAppMessage = taroHooks(\\"onShareAppMessage\\");
    exports.useShareAppMessage = useShareAppMessage;
    const useTabItemTap = taroHooks(\\"onTabItemTap\\");
    exports.useTabItemTap = useTabItemTap;
    const useTitleClick = taroHooks(\\"onTitleClick\\");
    exports.useTitleClick = useTitleClick;
    const useOptionMenuClick = taroHooks(\\"onOptionMenuClick\\");
    exports.useOptionMenuClick = useOptionMenuClick;
    const usePullIntercept = taroHooks(\\"onPullIntercept\\");
    exports.usePullIntercept = usePullIntercept;
    const useShareTimeline = taroHooks(\\"onShareTimeline\\");
    exports.useShareTimeline = useShareTimeline;
    const useAddToFavorites = taroHooks(\\"onAddToFavorites\\");
    exports.useAddToFavorites = useAddToFavorites;
    const useReady = taroHooks(\\"onReady\\");
    exports.useReady = useReady;
    const useRouter = (dynamic = false) => {
        const React = reactMeta.R;
        return dynamic ? _runtime.Current.router : React.useMemo(() => _runtime.Current.router, []);
    };
    exports.useRouter = useRouter;
    const useScope = () => undefined;
    exports.useScope = useScope;
    var taroHooks$1 = Object.freeze({
        __proto__: null,
        useDidShow: useDidShow,
        useDidHide: useDidHide,
        usePullDownRefresh: usePullDownRefresh,
        useReachBottom: useReachBottom,
        usePageScroll: usePageScroll,
        useResize: useResize,
        useShareAppMessage: useShareAppMessage,
        useTabItemTap: useTabItemTap,
        useTitleClick: useTitleClick,
        useOptionMenuClick: useOptionMenuClick,
        usePullIntercept: usePullIntercept,
        useShareTimeline: useShareTimeline,
        useAddToFavorites: useAddToFavorites,
        useReady: useReady,
        useRouter: useRouter,
        useScope: useScope
    });
    let h$1;
    let ReactDOM$1;
    const pageKeyId = (0, _runtime.incrementId)();
    const hooks$1 = _runtime.container.get(_runtime.SERVICE_IDENTIFIER.Hooks);
    function setReconciler(ReactDOM) {
        var _a;
        hooks$1.getLifecycle = function(instance, lifecycle) {
            lifecycle = lifecycle.replace(/^on(Show|Hide)$/, \\"componentDid$1\\");
            return instance[lifecycle];
        };
        (_a = hooks$1.modifyMpEventImpls) === null || _a === void 0 ? void 0 : _a.push((function(event) {
            event.type = event.type.replace(/-/g, \\"\\");
        }));
        hooks$1.batchedEventUpdates = function(cb) {
            ReactDOM.unstable_batchedUpdates(cb);
        };
        hooks$1.mergePageInstance = function(prev, next) {
            if (!prev || !next) return;
            if (\\"constructor\\" in prev) return;
            Object.keys(prev).forEach(item => {
                const prevList = prev[item];
                const nextList = ensureIsArray(next[item]);
                next[item] = nextList.concat(prevList);
            });
        };
        if (false) {}
    }
    function connectReactPage(R, id) {
        return Page => {
            const isReactComponent = isClassComponent(R, Page);
            const inject = node => node && (0, _runtime.injectPageInstance)(node, id);
            const refs = isReactComponent ? {
                ref: inject
            } : {
                forwardedRef: inject,
                reactReduxForwardedRef: inject
            };
            if (reactMeta.PageContext === _shared.EMPTY_OBJ) {
                reactMeta.PageContext = R.createContext(\\"\\");
            }
            return class PageWrapper extends R.Component {
                constructor() {
                    super(...arguments);
                    this.state = {
                        hasError: false
                    };
                }
                static getDerivedStateFromError(error) {
                    false && false;
                    return {
                        hasError: true
                    };
                }
                componentDidCatch(error, info) {
                    if (false) {}
                }
                render() {
                    const children = this.state.hasError ? [] : h$1(reactMeta.PageContext.Provider, {
                        value: id
                    }, h$1(Page, Object.assign(Object.assign({}, this.props), refs)));
                    if (false) {} else {
                        return h$1(\\"root\\", {
                            id: id
                        }, children);
                    }
                }
            };
        };
    }
    function createReactApp(App, react, dom, config) {
        var _a;
        if (false) {}
        reactMeta.R = react;
        h$1 = react.createElement;
        ReactDOM$1 = dom;
        const appInstanceRef = react.createRef();
        const isReactComponent = isClassComponent(react, App);
        let appWrapper;
        setReconciler(ReactDOM$1);
        function getAppInstance() {
            return appInstanceRef.current;
        }
        class AppWrapper extends react.Component {
            constructor() {
                super(...arguments);
                this.pages = [];
                this.elements = [];
            }
            mount(pageComponent, id, cb) {
                const pageWrapper = connectReactPage(react, id)(pageComponent);
                const key = id + pageKeyId();
                const page = () => h$1(pageWrapper, {
                    key: key,
                    tid: id
                });
                this.pages.push(page);
                this.forceUpdate(cb);
            }
            unmount(id, cb) {
                const elements = this.elements;
                const idx = elements.findIndex(item => item.props.tid === id);
                elements.splice(idx, 1);
                this.forceUpdate(cb);
            }
            render() {
                const {pages: pages, elements: elements} = this;
                while (pages.length > 0) {
                    const page = pages.pop();
                    elements.push(page());
                }
                let props = null;
                if (isReactComponent) {
                    props = {
                        ref: appInstanceRef
                    };
                }
                return h$1(App, props, false ? undefined : elements.slice());
            }
        }
        if (true) {
            appWrapper = (_a = ReactDOM$1.render) === null || _a === void 0 ? void 0 : _a.call(ReactDOM$1, h$1(AppWrapper), _runtime.document.getElementById(\\"app\\"));
        }
        const [ONLAUNCH, ONSHOW, ONHIDE] = hooks$1.getMiniLifecycleImpl().app;
        const appObj = Object.create({
            render(cb) {
                appWrapper.forceUpdate(cb);
            },
            mount(component, id, cb) {
                appWrapper.mount(component, id, cb);
            },
            unmount(id, cb) {
                appWrapper.unmount(id, cb);
            }
        }, {
            config: setDefaultDescriptor({
                configurable: true,
                value: config
            }),
            [ONLAUNCH]: setDefaultDescriptor({
                value(options) {
                    var _a, _b;
                    setRouterParams(options);
                    if (false) {}
                    const app = getAppInstance();
                    this.$app = app;
                    if (app) {
                        if (app.taroGlobalData) {
                            const globalData = app.taroGlobalData;
                            const keys = Object.keys(globalData);
                            const descriptors = Object.getOwnPropertyDescriptors(globalData);
                            keys.forEach(key => {
                                Object.defineProperty(this, key, {
                                    configurable: true,
                                    enumerable: true,
                                    get() {
                                        return globalData[key];
                                    },
                                    set(value) {
                                        globalData[key] = value;
                                    }
                                });
                            });
                            Object.defineProperties(this, descriptors);
                        }
                        (_b = app.onLaunch) === null || _b === void 0 ? void 0 : _b.call(app, options);
                    }
                }
            }),
            [ONSHOW]: setDefaultDescriptor({
                value(options) {
                    var _a;
                    setRouterParams(options);
                    const app = getAppInstance();
                    (_a = app === null || app === void 0 ? void 0 : app.componentDidShow) === null || _a === void 0 ? void 0 : _a.call(app, options);
                    triggerAppHook(\\"onShow\\", options);
                }
            }),
            [ONHIDE]: setDefaultDescriptor({
                value() {
                    var _a;
                    const app = getAppInstance();
                    (_a = app === null || app === void 0 ? void 0 : app.componentDidHide) === null || _a === void 0 ? void 0 : _a.call(app);
                    triggerAppHook(\\"onHide\\");
                }
            }),
            onPageNotFound: setDefaultDescriptor({
                value(res) {
                    var _a;
                    const app = getAppInstance();
                    (_a = app === null || app === void 0 ? void 0 : app.onPageNotFound) === null || _a === void 0 ? void 0 : _a.call(app, res);
                }
            })
        });
        function triggerAppHook(lifecycle, ...option) {
            const instance = (0, _runtime.getPageInstance)(HOOKS_APP_ID);
            if (instance) {
                const app = getAppInstance();
                const func = hooks$1.getLifecycle(instance, lifecycle);
                if (Array.isArray(func)) {
                    func.forEach(cb => cb.apply(app, option));
                }
            }
        }
        _runtime.Current.app = appObj;
        return appObj;
    }
    const getNativeCompId = (0, _runtime.incrementId)();
    let h;
    let ReactDOM;
    function initNativeComponentEntry(R, ReactDOM) {
        class NativeComponentWrapper extends R.Component {
            constructor() {
                super(...arguments);
                this.root = R.createRef();
                this.ctx = this.props.getCtx();
            }
            componentDidMount() {
                this.ctx.component = this;
                const rootElement = this.root.current;
                rootElement.ctx = this.ctx;
                rootElement.performUpdate(true);
            }
            render() {
                return h(\\"root\\", {
                    ref: this.root
                }, this.props.renderComponent(this.ctx));
            }
        }
        class Entry extends R.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    components: []
                };
            }
            componentDidMount() {
                _runtime.Current.app = this;
            }
            mount(Component, compId, getCtx) {
                const isReactComponent = isClassComponent(R, Component);
                const inject = node => node && (0, _runtime.injectPageInstance)(node, compId);
                const refs = isReactComponent ? {
                    ref: inject
                } : {
                    forwardedRef: inject,
                    reactReduxForwardedRef: inject
                };
                if (reactMeta.PageContext === _shared.EMPTY_OBJ) {
                    reactMeta.PageContext = R.createContext(\\"\\");
                }
                const item = {
                    compId: compId,
                    element: h(NativeComponentWrapper, {
                        key: compId,
                        getCtx: getCtx,
                        renderComponent(ctx) {
                            return h(reactMeta.PageContext.Provider, {
                                value: compId
                            }, h(Component, Object.assign(Object.assign(Object.assign({}, (ctx.data || (ctx.data = {})).props), refs), {
                                $scope: ctx
                            })));
                        }
                    })
                };
                this.setState({
                    components: [ ...this.state.components, item ]
                });
            }
            unmount(compId) {
                const components = this.state.components;
                const index = components.findIndex(item => item.compId === compId);
                const next = [ ...components.slice(0, index), ...components.slice(index + 1) ];
                this.setState({
                    components: next
                });
            }
            render() {
                const components = this.state.components;
                return components.map(({element: element}) => element);
            }
        }
        setReconciler(ReactDOM);
        const app = _runtime.document.getElementById(\\"app\\");
        ReactDOM.render(h(Entry, {}), app);
    }
    function createNativeComponentConfig(Component, react, reactdom, componentConfig) {
        var _a, _b;
        reactMeta.R = react;
        h = react.createElement;
        ReactDOM = reactdom;
        setReconciler(ReactDOM);
        const componentObj = {
            options: componentConfig,
            properties: {
                props: {
                    type: null,
                    value: null,
                    observer(_newVal, oldVal) {
                        oldVal && this.component.forceUpdate();
                    }
                }
            },
            created() {
                if (!_runtime.Current.app) {
                    initNativeComponentEntry(react, ReactDOM);
                }
            },
            attached() {
                setCurrent();
                this.compId = getNativeCompId();
                this.config = componentConfig;
                _runtime.Current.app.mount(Component, this.compId, () => this);
            },
            ready() {
                (0, _runtime.safeExecute)(this.compId, \\"onReady\\");
            },
            detached() {
                _runtime.Current.app.unmount(this.compId);
            },
            pageLifetimes: {
                show(options) {
                    (0, _runtime.safeExecute)(this.compId, \\"onShow\\", options);
                },
                hide() {
                    (0, _runtime.safeExecute)(this.compId, \\"onHide\\");
                }
            },
            methods: {
                eh: _runtime.eventHandler
            }
        };
        function setCurrent() {
            const pages = getCurrentPages();
            const currentPage = pages[pages.length - 1];
            if (_runtime.Current.page === currentPage) return;
            _runtime.Current.page = currentPage;
            const route = currentPage.route || currentPage.__route__;
            const router = {
                params: currentPage.options || {},
                path: (0, _runtime.addLeadingSlash)(route),
                onReady: \\"\\",
                onHide: \\"\\",
                onShow: \\"\\"
            };
            _runtime.Current.router = router;
            if (!currentPage.options) {
                Object.defineProperty(currentPage, \\"options\\", {
                    enumerable: true,
                    configurable: true,
                    get() {
                        return this._optionsValue;
                    },
                    set(value) {
                        router.params = value;
                        this._optionsValue = value;
                    }
                });
            }
        }
        if (Component.onShareAppMessage || ((_a = Component.prototype) === null || _a === void 0 ? void 0 : _a.onShareAppMessage) || Component.enableShareAppMessage) {
            componentObj.methods.onShareAppMessage = function(options) {
                const target = options === null || options === void 0 ? void 0 : options.target;
                if (target) {
                    const id = target.id;
                    const element = _runtime.document.getElementById(id);
                    if (element) {
                        target.dataset = element.dataset;
                    }
                }
                return (0, _runtime.safeExecute)(this.compId, \\"onShareAppMessage\\", options);
            };
        }
        if (Component.onShareTimeline || ((_b = Component.prototype) === null || _b === void 0 ? void 0 : _b.onShareTimeline) || Component.enableShareTimeline) {
            componentObj.methods.onShareTimeline = function() {
                return (0, _runtime.safeExecute)(this.compId, \\"onShareTimeline\\");
            };
        }
        return componentObj;
    }
    var _a;
    const hooks = _runtime.container.get(_runtime.SERVICE_IDENTIFIER.Hooks);
    hooks.initNativeApiImpls || (hooks.initNativeApiImpls = []);
    hooks.initNativeApiImpls.push((function(taro) {
        for (const hook in taroHooks$1) {
            taro[hook] = taroHooks$1[hook];
        }
    }));
    if (false) {}
}, function(module, exports, __webpack_require__) {
    \\"use strict\\";
    var _interopRequireWildcard = __webpack_require__(3).default;
    Object.defineProperty(exports, \\"__esModule\\", {
        value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(__webpack_require__(2));
    __webpack_require__(13);
    class App extends _react.Component {
        componentDidMount() {}
        componentDidShow() {}
        componentDidHide() {}
        componentDidCatchError() {}
        render() {
            return this.props.children;
        }
    }
    var _default = App;
    exports.default = _default;
}, , , , , function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.r(__webpack_exports__);
    var _tarojs_plugin_platform_swan_dist_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
    var _tarojs_plugin_platform_swan_dist_runtime__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_tarojs_plugin_platform_swan_dist_runtime__WEBPACK_IMPORTED_MODULE_0__);
    var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
    var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__.n(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_1__);
    var _tarojs_plugin_framework_react_dist_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
    var _tarojs_plugin_framework_react_dist_runtime__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__.n(_tarojs_plugin_framework_react_dist_runtime__WEBPACK_IMPORTED_MODULE_2__);
    var _tarojs_taro__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
    var _tarojs_taro__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__.n(_tarojs_taro__WEBPACK_IMPORTED_MODULE_3__);
    var _node_modules_babel_loader_lib_index_js_app_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
    var _node_modules_babel_loader_lib_index_js_app_js__WEBPACK_IMPORTED_MODULE_4___default = __webpack_require__.n(_node_modules_babel_loader_lib_index_js_app_js__WEBPACK_IMPORTED_MODULE_4__);
    var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);
    var react__WEBPACK_IMPORTED_MODULE_5___default = __webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
    var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6);
    var react_dom__WEBPACK_IMPORTED_MODULE_6___default = __webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_6__);
    var config = {
        pages: [ \\"pages/index/index\\" ],
        window: {
            backgroundTextStyle: \\"light\\",
            navigationBarBackgroundColor: \\"#fff\\",
            navigationBarTitleText: \\"WeChat\\",
            navigationBarTextStyle: \\"black\\"
        }
    };
    _tarojs_runtime__WEBPACK_IMPORTED_MODULE_1__[\\"window\\"].__taroAppConfig = config;
    var inst = App(Object(_tarojs_plugin_framework_react_dist_runtime__WEBPACK_IMPORTED_MODULE_2__[\\"createReactApp\\"])(_node_modules_babel_loader_lib_index_js_app_js__WEBPACK_IMPORTED_MODULE_4___default.a, react__WEBPACK_IMPORTED_MODULE_5__, react_dom__WEBPACK_IMPORTED_MODULE_6___default.a, config));
    Object(_tarojs_taro__WEBPACK_IMPORTED_MODULE_3__[\\"initPxTransform\\"])({
        designWidth: 750,
        deviceRatio: {
            640: 1.17,
            750: 1,
            828: .905
        }
    });
}, function(module, exports, __webpack_require__) {
    \\"use strict\\";
    var _shared = __webpack_require__(1);
    const needPromiseApis = new Set([ \\"addEventOnCalendar\\", \\"chooseAlbum\\", \\"closeCommunityEditor\\", \\"getSwanId\\", \\"requestPolymerPayment\\", \\"navigateBackSmartProgram\\", \\"navigateToSmartProgram\\", \\"setPageInfo\\", \\"closeReplyEditor\\", \\"deleteBookShelf\\", \\"deleteEventOnCalendar\\", \\"getSystemRiskInfo\\", \\"insertBookshelf\\", \\"loadSubPackage\\", \\"openCommunityEditor\\", \\"openReplyEditor\\", \\"openShare\\", \\"setDocumentTitle\\", \\"setMetaDescription\\", \\"setMetaKeywords\\", \\"shareFile\\", \\"subscribeService\\", \\"updateBookshelfReadTime\\" ]);
    const apiDiff = {
        login: {
            alias: \\"getLoginCode\\"
        }
    };
    function transformMeta(api, options) {
        let apiAlias = api;
        Object.keys(apiDiff).forEach(item => {
            const apiItem = apiDiff[item];
            if (api === item) {
                if (apiItem.alias) {
                    apiAlias = apiItem.alias;
                }
                if (apiItem.options) {
                    const change = apiItem.options.change;
                    const set = apiItem.options.set;
                    if (change) {
                        change.forEach(changeItem => {
                            options[changeItem.new] = options[changeItem.old];
                        });
                    }
                    if (set) {
                        set.forEach(setItem => {
                            options[setItem.key] = typeof setItem.value === \\"function\\" ? setItem.value(options) : setItem.value;
                        });
                    }
                }
            }
        });
        return {
            key: apiAlias,
            options: options
        };
    }
    function initNativeApi(taro) {
        (0, _shared.processApis)(taro, swan, {
            needPromiseApis: needPromiseApis,
            transformMeta: transformMeta
        });
    }
    const components = {
        Progress: {
            \\"border-radius\\": \\"0\\",
            \\"font-size\\": \\"16\\",
            duration: \\"30\\"
        },
        RichText: {
            selectable: \\"false\\",
            name: \\"\\",
            attrs: \\"\\",
            children: \\"[]\\",
            text: \\"\\",
            \\"image-menu-prevent\\": \\"false\\",
            preview: \\"\\"
        },
        Map: {
            polygons: \\"[]\\",
            \\"enable-3D\\": \\"false\\",
            \\"show-compass\\": \\"false\\",
            \\"enable-overlooking\\": \\"false\\",
            \\"enable-zoom\\": \\"true\\",
            \\"enable-scroll\\": \\"true\\",
            \\"enable-rotate\\": \\"false\\",
            bindRegionChange: \\"\\",
            bindPoiTap: \\"\\"
        },
        Button: {
            bindGetPhoneNumber: \\"\\",
            bindGetUserInfo: \\"\\",
            bindOpenSetting: \\"\\",
            bindContact: \\"\\",
            bindChooseAddress: \\"\\",
            bindChooseInvoiceTitle: \\"\\"
        },
        Form: {
            \\"report-type\\": \\"default\\",
            \\"template-id\\": \\"\\",
            \\"subscribe-id\\": \\"\\"
        },
        Input: {
            \\"adjust-position\\": \\"true\\"
        },
        Textarea: {
            \\"confirm-type\\": (0, _shared.singleQuote)(\\"default\\"),
            \\"confirm-hold\\": \\"false\\",
            \\"show-confirm-bar\\": \\"true\\",
            \\"adjust-position\\": \\"true\\"
        },
        Navigator: {
            target: (0, _shared.singleQuote)(\\"self\\"),
            \\"app-id\\": \\"\\",
            path: \\"\\",
            \\"extra-data\\": \\"\\",
            version: (0, _shared.singleQuote)(\\"version\\")
        },
        Image: {
            webp: \\"false\\",
            \\"image-menu-prevent\\": \\"false\\",
            preview: \\"\\",
            \\"original-src\\": \\"\\"
        },
        Video: {
            title: \\"\\",
            \\"show-no-wifi-tip\\": \\"true\\",
            \\"vslide-gesture\\": \\"false\\",
            \\"vslide-gesture-in-fullscreen\\": \\"true\\",
            \\"enable-play-gesture\\": \\"false\\",
            \\"show-rate-btn\\": \\"false\\",
            \\"show-vslide-btn-in-fullscreen\\": \\"true\\",
            \\"silent-play\\": \\"false\\",
            bindLoadedMetadata: \\"\\"
        },
        Ad: {
            appid: \\"\\",
            apid: \\"\\",
            type: (0, _shared.singleQuote)(\\"feed\\"),
            updatetime: \\"\\",
            bindStatus: \\"\\"
        },
        Tabs: {
            \\"tabs-background-color\\": (0, _shared.singleQuote)(\\"#fff\\"),
            \\"tabs-active-text-color\\": (0, _shared.singleQuote)(\\"#000\\"),
            \\"tabs-inactive-text-color\\": (0, _shared.singleQuote)(\\"#666\\"),
            \\"tabs-underline-color\\": (0, _shared.singleQuote)(\\"#333\\"),
            \\"active-name\\": \\"\\",
            \\"url-query-name\\": \\"\\",
            \\"max-tab-item-amount\\": \\"5\\",
            bindTabChange: \\"\\"
        },
        TabItem: {
            label: \\"\\",
            name: \\"\\",
            \\"badge-type\\": \\"\\",
            \\"badge-text\\": \\"\\"
        },
        AnimationVideo: {
            \\"resource-width\\": \\"800\\",
            \\"resource-height\\": \\"400\\",
            \\"canvas-style\\": (0, _shared.singleQuote)(\\"width:400px;height:400px\\"),
            path: \\"\\",
            loop: \\"fasle\\",
            autoplay: \\"fasle\\",
            bindStarted: \\"\\",
            bindEnded: \\"\\"
        },
        AnimationView: {
            path: \\"\\",
            loop: \\"false\\",
            autoplay: \\"true\\",
            action: (0, _shared.singleQuote)(\\"play\\"),
            hidden: \\"true\\",
            bindEnded: \\"\\"
        },
        ArCamera: {
            key: \\"\\",
            type: \\"\\",
            flash: (0, _shared.singleQuote)(\\"off\\"),
            bindError: \\"\\",
            bindLoad: \\"\\",
            bindMessage: \\"\\",
            bindScanCode: \\"\\"
        },
        RtcRoom: {
            id: \\"\\",
            \\"enable-camera\\": \\"true\\",
            \\"enable-auto-focus\\": \\"true\\",
            \\"enable-zoom\\": \\"false\\",
            \\"device-position\\": (0, _shared.singleQuote)(\\"front\\"),
            \\"enable-mic\\": \\"true\\",
            \\"enable-agc\\": \\"false\\",
            \\"enable-ans\\": \\"false\\",
            bitrate: \\"900\\",
            \\"video-width\\": \\"360\\",
            \\"video-height\\": \\"640\\",
            \\"enable-remote-mirror\\": \\"false\\",
            \\"local-mirror\\": (0, _shared.singleQuote)(\\"auto\\"),
            \\"sound-mode\\": (0, _shared.singleQuote)(\\"speaker\\"),
            bindStateChange: \\"\\",
            bindError: \\"\\"
        },
        RtcRoomItem: {
            id: \\"\\",
            type: \\"\\",
            \\"user-id\\": \\"\\"
        },
        OpenData: {
            type: \\"\\"
        },
        Login: {
            \\"button-class\\": \\"\\",
            bindGetPhoneNumber: \\"\\",
            bindLoadError: \\"\\"
        }
    };
    const hostConfig = {
        initNativeApi: initNativeApi,
        getPathIndex(indexOfNode) {
            return \`\${indexOfNode}\`;
        },
        getSpecialNodes() {
            return [ \\"text\\", \\"image\\" ];
        },
        modifyTaroEvent(event, node) {
            if (node.tagName === \\"MAP\\" && event.type === \\"regionchange\\") {
                event.type = \\"end\\";
            }
        },
        getMiniLifecycle(config) {
            config.page[0] = \\"onInit\\";
            return config;
        }
    };
    (0, _shared.mergeReconciler)(hostConfig);
    (0, _shared.mergeInternalComponents)(components);
}, , function(module, exports, __webpack_require__) {} ], [ [ 10, 0, 1, 3, 2 ] ] ]);



/** filePath: dist\\\\custom-wrapper.js **/
(swan[\\"webpackJsonp\\"] = swan[\\"webpackJsonp\\"] || []).push([ [ 6 ], {
    14: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        var _runtime = __webpack_require__(0);
        Component((0, _runtime.createRecursiveComponentConfig)(\\"custom-wrapper\\"));
    }
}, [ [ 14, 0, 1 ] ] ]);

/** filePath: dist\\\\pages\\\\index\\\\index.css **/


/** filePath: dist\\\\pages\\\\index\\\\index.js **/
(swan[\\"webpackJsonp\\"] = swan[\\"webpackJsonp\\"] || []).push([ [ 7 ], {
    15: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__);
        var _node_modules_babel_loader_lib_index_js_index_jsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
        var _node_modules_babel_loader_lib_index_js_index_jsx__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__.n(_node_modules_babel_loader_lib_index_js_index_jsx__WEBPACK_IMPORTED_MODULE_1__);
        var config = {
            navigationBarTitleText: \\"\\\\u9996\\\\u9875\\"
        };
        var inst = Page(Object(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__[\\"createPageConfig\\"])(_node_modules_babel_loader_lib_index_js_index_jsx__WEBPACK_IMPORTED_MODULE_1___default.a, \\"pages/index/index\\", {
            root: {
                cn: []
            }
        }, config || {}));
    },
    17: function(module, exports, __webpack_require__) {},
    7: function(module, exports, __webpack_require__) {
        \\"use strict\\";
        var _interopRequireWildcard = __webpack_require__(3).default;
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
        exports.default = void 0;
        var _react = _interopRequireWildcard(__webpack_require__(2));
        var _components = __webpack_require__(16);
        __webpack_require__(17);
        class Index extends _react.Component {
            async componentWillMount() {
                await Promise.resolve(1);
            }
            componentDidMount() {}
            componentWillUnmount() {}
            componentDidShow() {}
            componentDidHide() {}
            render() {
                return _react.default.createElement(_components.View, {
                    className: \\"index\\"
                }, _react.default.createElement(_components.Text, null, \\"Hello world!\\"), _react.default.createElement(_components.Input, {
                    placeholder: \\"input\\",
                    value: \\"\\"
                }), _react.default.createElement(_components.Textarea, {
                    value: \\"\\"
                }), _react.default.createElement(_components.Swiper, null, _react.default.createElement(_components.SwiperItem, null, _react.default.createElement(_components.Text, null, \\"Swiper item\\"))), _react.default.createElement(_components.Video, null), _react.default.createElement(_components.Canvas, null, _react.default.createElement(_components.CoverView, null, _react.default.createElement(_components.CoverImage, null))));
            }
        }
        exports.default = Index;
    }
}, [ [ 15, 0, 1, 3, 2 ] ] ]);

/** filePath: dist\\\\pages\\\\index\\\\index.json **/
{\\"navigationBarTitleText\\":\\"首页\\",\\"usingComponents\\":{\\"custom-wrapper\\":\\"../../custom-wrapper\\"}}

/** filePath: dist\\\\pages\\\\index\\\\index.swan **/
<import src=\\"../../base.swan\\"/>
<template is=\\"taro_tmpl\\" data=\\"{{{ root:root }}}\\" />

/** filePath: dist\\\\app.json **/
{\\"pages\\":[\\"pages/index/index\\"],\\"window\\":{\\"backgroundTextStyle\\":\\"light\\",\\"navigationBarBackgroundColor\\":\\"#fff\\",\\"navigationBarTitleText\\":\\"WeChat\\",\\"navigationBarTextStyle\\":\\"black\\"}}

/** filePath: dist\\\\custom-wrapper.json **/
{\\"component\\":true,\\"usingComponents\\":{\\"custom-wrapper\\":\\"./custom-wrapper\\"}}

/** filePath: dist\\\\base.swan **/
<import-sjs module=\\"xs\\" src=\\"./utils.sjs\\" />
<template name=\\"taro_tmpl\\">
  <block s-for=\\"{{root.cn}}\\" s-key=\\"sid\\">
    <template is=\\"tmpl_0_container\\" data=\\"{{{ i:item }}}\\" />
  </block>
</template>

<template name=\\"tmpl_0_catch-view\\">
  <view hover-class=\\"{{ xs.b(i.hoverClass,'none') }}\\" hover-stop-propagation=\\"{{ xs.b(i.hoverStopPropagation,false) }}\\" hover-start-time=\\"{{ xs.b(i.hoverStartTime,50) }}\\" hover-stay-time=\\"{{ xs.b(i.hoverStayTime,400) }}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{ i.animation }}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_view\\">
  <view hover-class=\\"{{ xs.b(i.hoverClass,'none') }}\\" hover-stop-propagation=\\"{{ xs.b(i.hoverStopPropagation,false) }}\\" hover-start-time=\\"{{ xs.b(i.hoverStartTime,50) }}\\" hover-stay-time=\\"{{ xs.b(i.hoverStayTime,400) }}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{ i.animation }}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                      <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                          <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                              <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                  <view s-if=\\"{{item.nn==='view'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" hover-class=\\"{{xs.b(item.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{item.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                                    </block>
                                  </view>
                                  <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                      <block>{{item.v}}</block>
                                    </block>
                                  </text>
                                  <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
                                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                      <block>{{item.v}}</block>
                                    </block>
                                  </text>
                                  <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                                    </block>
                                  </button>
                                  <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
                                  <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                                    </block>
                                  </swiper>
                                  <block s-else>
                                    <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                                  </block>
                                </block>
                              </view>
                              <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                  <block>{{item.v}}</block>
                                </block>
                              </text>
                              <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
                                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                  <block>{{item.v}}</block>
                                </block>
                              </text>
                              <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                                </block>
                              </button>
                              <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
                              <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                                </block>
                              </swiper>
                              <block s-else>
                                <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                              </block>
                            </block>
                          </view>
                          <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                              <block>{{item.v}}</block>
                            </block>
                          </text>
                          <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
                            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                              <block>{{item.v}}</block>
                            </block>
                          </text>
                          <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                              <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                            </block>
                          </button>
                          <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
                          <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                              <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                            </block>
                          </swiper>
                          <block s-else>
                            <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                          </block>
                        </block>
                      </view>
                      <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                          <block>{{item.v}}</block>
                        </block>
                      </text>
                      <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
                        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                          <block>{{item.v}}</block>
                        </block>
                      </text>
                      <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                          <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                        </block>
                      </button>
                      <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
                      <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                          <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                        </block>
                      </swiper>
                      <block s-else>
                        <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                      </block>
                    </block>
                  </view>
                  <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                      <block>{{item.v}}</block>
                    </block>
                  </text>
                  <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                      <block>{{item.v}}</block>
                    </block>
                  </text>
                  <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                    </block>
                  </button>
                  <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
                  <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                    <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                    </block>
                  </swiper>
                  <block s-else>
                    <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                  </block>
                </block>
              </view>
              <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <block>{{item.v}}</block>
                </block>
              </text>
              <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <block>{{item.v}}</block>
                </block>
              </text>
              <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                </block>
              </button>
              <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
              <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                </block>
              </swiper>
              <block s-else>
                <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
              </block>
            </block>
          </view>
          <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <block>{{item.v}}</block>
            </block>
          </text>
          <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <block>{{item.v}}</block>
            </block>
          </text>
          <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
            </block>
          </button>
          <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
          <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
            </block>
          </swiper>
          <block s-else>
            <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
          </block>
        </block>
      </view>
      <text s-elif=\\"{{item.nn==='text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <block>{{item.v}}</block>
        </block>
      </text>
      <text s-elif=\\"{{item.nn==='static-text'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <block>{{item.v}}</block>
        </block>
      </text>
      <button s-elif=\\"{{item.nn==='button'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" size=\\"{{xs.b(item.size,'default')}}\\" type=\\"{{item.type}}\\" plain=\\"{{xs.b(item.plain,false)}}\\" disabled=\\"{{item.disabled}}\\" loading=\\"{{xs.b(item.loading,false)}}\\" form-type=\\"{{item.formType}}\\" open-type=\\"{{item.openType}}\\" hover-class=\\"{{xs.b(item.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(item.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(item.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(item.hoverStayTime,70)}}\\" name=\\"{{item.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
        </block>
      </button>
      <input s-elif=\\"{{item.nn==='input'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" value=\\"{{item.value}}\\" type=\\"{{xs.b(item.type,'')}}\\" password=\\"{{xs.b(item.password,false)}}\\" placeholder=\\"{{item.placeholder}}\\" placeholder-style=\\"{{item.placeholderStyle}}\\" placeholder-class=\\"{{xs.b(item.placeholderClass,'input-placeholder')}}\\" disabled=\\"{{item.disabled}}\\" maxlength=\\"{{xs.b(item.maxlength,140)}}\\" cursor-spacing=\\"{{xs.b(item.cursorSpacing,0)}}\\" focus=\\"{{xs.b(item.focus,false)}}\\" confirm-type=\\"{{xs.b(item.confirmType,'done')}}\\" confirm-hold=\\"{{xs.b(item.confirmHold,false)}}\\" cursor=\\"{{xs.b(item.cursor,i.value.length)}}\\" selection-start=\\"{{xs.b(item.selectionStart,-1)}}\\" selection-end=\\"{{xs.b(item.selectionEnd,-1)}}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\" />
      <swiper s-elif=\\"{{item.nn==='swiper'&&(item.st||item.cl)}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" indicator-dots=\\"{{xs.b(item.indicatorDots,false)}}\\" indicator-color=\\"{{xs.b(item.indicatorColor,'rgba(0, 0, 0, .3)')}}\\" indicator-active-color=\\"{{xs.b(item.indicatorActiveColor,'#000000')}}\\" autoplay=\\"{{xs.b(item.autoplay,false)}}\\" current=\\"{{xs.b(item.current,0)}}\\" interval=\\"{{xs.b(item.interval,5000)}}\\" duration=\\"{{xs.b(item.duration,500)}}\\" circular=\\"{{xs.b(item.circular,false)}}\\" vertical=\\"{{xs.b(item.vertical,false)}}\\" previous-margin=\\"{{xs.b(item.previousMargin,'0px')}}\\" next-margin=\\"{{xs.b(item.nextMargin,'0px')}}\\" display-multiple-items=\\"{{xs.b(item.displayMultipleItems,1)}}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
        </block>
      </swiper>
      <block s-else>
        <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
      </block>
    </block>
  </view>
</template>

<template name=\\"tmpl_0_icon\\">
  <icon type=\\"{{ i.type }}\\" size=\\"{{ xs.b(i.size,23) }}\\" color=\\"{{ i.color }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></icon>
</template>

<template name=\\"tmpl_0_progress\\">
  <progress percent=\\"{{ i.percent }}\\" stroke-width=\\"{{ xs.b(i.strokeWidth,6) }}\\" color=\\"{{ xs.b(i.color,'#09BB07') }}\\" activeColor=\\"{{ xs.b(i.activeColor,'#09BB07') }}\\" backgroundColor=\\"{{ xs.b(i.backgroundColor,'#EBEBEB') }}\\" active=\\"{{ xs.b(i.active,false) }}\\" active-mode=\\"{{ xs.b(i.activeMode,'backwards') }}\\" show-info=\\"{{ xs.b(i.showInfo,false) }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></progress>
</template>

<template name=\\"tmpl_0_rich-text\\">
  <rich-text nodes=\\"{{ xs.b(i.nodes,[]) }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></rich-text>
</template>

<template name=\\"tmpl_0_static-text\\">
  <text selectable=\\"{{ xs.b(i.selectable,false) }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ xs.b(i.decode,false) }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <block s-if=\\"item.nn === '#text'\\">{{item.v}}</block>
      <text s-else id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <block s-if=\\"item.nn === '#text'\\">{{item.v}}</block>
          <text s-else id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <block s-if=\\"item.nn === '#text'\\">{{item.v}}</block>
              <text s-else id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <block>{{i.cn[index].v}}</block>
                </block>
              </text>
            </block>
          </text>
        </block>
      </text>
    </block>
  </text>
</template>

<template name=\\"tmpl_0_text\\">
  <text selectable=\\"{{ xs.b(i.selectable,false) }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ xs.b(i.decode,false) }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <block s-if=\\"item.nn === '#text'\\">{{item.v}}</block>
      <text s-else id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <block s-if=\\"item.nn === '#text'\\">{{item.v}}</block>
          <text s-else id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <block s-if=\\"item.nn === '#text'\\">{{item.v}}</block>
              <text s-else id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" selectable=\\"{{xs.b(item.selectable,false)}}\\" space=\\"{{item.space}}\\" decode=\\"{{xs.b(item.decode,false)}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <block>{{i.cn[index].v}}</block>
                </block>
              </text>
            </block>
          </text>
        </block>
      </text>
    </block>
  </text>
</template>

<template name=\\"tmpl_0_button\\">
  <button size=\\"{{ xs.b(i.size,'default') }}\\" type=\\"{{ i.type }}\\" plain=\\"{{ xs.b(i.plain,false) }}\\" disabled=\\"{{ i.disabled }}\\" loading=\\"{{ xs.b(i.loading,false) }}\\" form-type=\\"{{ i.formType }}\\" open-type=\\"{{ i.openType }}\\" hover-class=\\"{{ xs.b(i.hoverClass,'button-hover') }}\\" hover-stop-propagation=\\"{{ xs.b(i.hoverStopPropagation,false) }}\\" hover-start-time=\\"{{ xs.b(i.hoverStartTime,20) }}\\" hover-stay-time=\\"{{ xs.b(i.hoverStayTime,70) }}\\" name=\\"{{ i.name }}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </button>
</template>

<template name=\\"tmpl_0_checkbox\\">
  <checkbox value=\\"{{ i.value }}\\" disabled=\\"{{ i.disabled }}\\" checked=\\"{{ xs.b(i.checked,false) }}\\" color=\\"{{ xs.b(i.color,'#09BB07') }}\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </checkbox>
</template>

<template name=\\"tmpl_0_checkbox-group\\">
  <checkbox-group bindchange=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </checkbox-group>
</template>

<template name=\\"tmpl_0_form\\">
  <form report-submit=\\"{{ xs.b(i.reportSubmit,false) }}\\" bindsubmit=\\"eh\\" bindreset=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </form>
</template>

<template name=\\"tmpl_0_input\\">
  <template is=\\"{{xs.c(i, 'tmpl_0_')}}\\" data=\\"{{{ i:i }}}\\" />
</template>

<template name=\\"tmpl_0_input_focus\\">
  <input value=\\"{= i.value =}\\" type=\\"{{ xs.b(i.type,'') }}\\" password=\\"{{ xs.b(i.password,false) }}\\" placeholder=\\"{{ i.placeholder }}\\" placeholder-style=\\"{{ i.placeholderStyle }}\\" placeholder-class=\\"{{ xs.b(i.placeholderClass,'input-placeholder') }}\\" disabled=\\"{{ i.disabled }}\\" maxlength=\\"{{ xs.b(i.maxlength,140) }}\\" cursor-spacing=\\"{{ xs.b(i.cursorSpacing,0) }}\\" focus=\\"{{ xs.b(i.focus,false) }}\\" confirm-type=\\"{{ xs.b(i.confirmType,'done') }}\\" confirm-hold=\\"{{ xs.b(i.confirmHold,false) }}\\" cursor=\\"{{ xs.b(i.cursor,i.value.length) }}\\" selection-start=\\"{{ xs.b(i.selectionStart,-1) }}\\" selection-end=\\"{{ xs.b(i.selectionEnd,-1) }}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></input>
</template>

<template name=\\"tmpl_0_input_blur\\">
  <input value=\\"{= i.value =}\\" type=\\"{{ xs.b(i.type,'') }}\\" password=\\"{{ xs.b(i.password,false) }}\\" placeholder=\\"{{ i.placeholder }}\\" placeholder-style=\\"{{ i.placeholderStyle }}\\" placeholder-class=\\"{{ xs.b(i.placeholderClass,'input-placeholder') }}\\" disabled=\\"{{ i.disabled }}\\" maxlength=\\"{{ xs.b(i.maxlength,140) }}\\" cursor-spacing=\\"{{ xs.b(i.cursorSpacing,0) }}\\" confirm-type=\\"{{ xs.b(i.confirmType,'done') }}\\" confirm-hold=\\"{{ xs.b(i.confirmHold,false) }}\\" cursor=\\"{{ xs.b(i.cursor,i.value.length) }}\\" selection-start=\\"{{ xs.b(i.selectionStart,-1) }}\\" selection-end=\\"{{ xs.b(i.selectionEnd,-1) }}\\" bindinput=\\"eh\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></input>
</template>

<template name=\\"tmpl_0_label\\">
  <label for=\\"{{ i.for }}\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </label>
</template>

<template name=\\"tmpl_0_picker\\">
  <picker mode=\\"{{ xs.b(i.mode,'selector') }}\\" disabled=\\"{{ i.disabled }}\\" range=\\"{{ i.range }}\\" range-key=\\"{{ i.rangeKey }}\\" value=\\"{{ i.value }}\\" start=\\"{{ i.start }}\\" end=\\"{{ i.end }}\\" fields=\\"{{ xs.b(i.fields,'day') }}\\" custom-item=\\"{{ i.customItem }}\\" name=\\"{{ i.name }}\\" bindcancel=\\"eh\\" bindchange=\\"eh\\" bindcolumnchange=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </picker>
</template>

<template name=\\"tmpl_0_picker-view\\">
  <picker-view value=\\"{{ i.value }}\\" indicator-style=\\"{{ i.indicatorStyle }}\\" indicator-class=\\"{{ i.indicatorClass }}\\" mask-style=\\"{{ i.maskStyle }}\\" mask-class=\\"{{ i.maskClass }}\\" bindchange=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <picker-view-column id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" name=\\"{{item.name}}\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
                </block>
              </picker-view-column>
    </block>
  </picker-view>
</template>

<template name=\\"tmpl_0_radio\\">
  <radio value=\\"{{ i.value }}\\" checked=\\"{{ xs.b(i.checked,false) }}\\" disabled=\\"{{ i.disabled }}\\" color=\\"{{ xs.b(i.color,'#09BB07') }}\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </radio>
</template>

<template name=\\"tmpl_0_radio-group\\">
  <radio-group bindchange=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </radio-group>
</template>

<template name=\\"tmpl_0_slider\\">
  <slider min=\\"{{ xs.b(i.min,0) }}\\" max=\\"{{ xs.b(i.max,100) }}\\" step=\\"{{ xs.b(i.step,1) }}\\" disabled=\\"{{ i.disabled }}\\" value=\\"{= xs.b(i.value,0) =}\\" activeColor=\\"{{ xs.b(i.activeColor,'#1aad19') }}\\" backgroundColor=\\"{{ xs.b(i.backgroundColor,'#e9e9e9') }}\\" block-size=\\"{{ xs.b(i.blockSize,28) }}\\" block-color=\\"{{ xs.b(i.blockColor,'#ffffff') }}\\" show-value=\\"{{ xs.b(i.showValue,false) }}\\" bindchange=\\"eh\\" bindchanging=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></slider>
</template>

<template name=\\"tmpl_0_switch\\">
  <switch checked=\\"{{ xs.b(i.checked,false) }}\\" disabled=\\"{{ i.disabled }}\\" type=\\"{{ xs.b(i.type,'switch') }}\\" color=\\"{{ xs.b(i.color,'#04BE02') }}\\" bindchange=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></switch>
</template>

<template name=\\"tmpl_0_cover-image\\">
  <cover-image src=\\"{{ i.src }}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </cover-image>
</template>

<template name=\\"tmpl_0_textarea\\">
  <template is=\\"{{xs.c(i, 'tmpl_0_')}}\\" data=\\"{{{ i:i }}}\\" />
</template>

<template name=\\"tmpl_0_textarea_focus\\">
  <textarea value=\\"{= i.value =}\\" placeholder=\\"{{ i.placeholder }}\\" placeholder-style=\\"{{ i.placeholderStyle }}\\" placeholder-class=\\"{{ xs.b(i.placeholderClass,'textarea-placeholder') }}\\" disabled=\\"{{ i.disabled }}\\" maxlength=\\"{{ xs.b(i.maxlength,140) }}\\" auto-focus=\\"{{ xs.b(i.autoFocus,false) }}\\" focus=\\"{{ xs.b(i.focus,false) }}\\" auto-height=\\"{{ xs.b(i.autoHeight,false) }}\\" fixed=\\"{{ xs.b(i.fixed,false) }}\\" cursor-spacing=\\"{{ xs.b(i.cursorSpacing,0) }}\\" cursor=\\"{{ xs.b(i.cursor,-1) }}\\" selection-start=\\"{{ xs.b(i.selectionStart,-1) }}\\" selection-end=\\"{{ xs.b(i.selectionEnd,-1) }}\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindlinechange=\\"eh\\" bindinput=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></textarea>
</template>

<template name=\\"tmpl_0_textarea_blur\\">
  <textarea value=\\"{= i.value =}\\" placeholder=\\"{{ i.placeholder }}\\" placeholder-style=\\"{{ i.placeholderStyle }}\\" placeholder-class=\\"{{ xs.b(i.placeholderClass,'textarea-placeholder') }}\\" disabled=\\"{{ i.disabled }}\\" maxlength=\\"{{ xs.b(i.maxlength,140) }}\\" auto-focus=\\"{{ xs.b(i.autoFocus,false) }}\\" auto-height=\\"{{ xs.b(i.autoHeight,false) }}\\" fixed=\\"{{ xs.b(i.fixed,false) }}\\" cursor-spacing=\\"{{ xs.b(i.cursorSpacing,0) }}\\" cursor=\\"{{ xs.b(i.cursor,-1) }}\\" selection-start=\\"{{ xs.b(i.selectionStart,-1) }}\\" selection-end=\\"{{ xs.b(i.selectionEnd,-1) }}\\" bindfocus=\\"eh\\" bindblur=\\"eh\\" bindlinechange=\\"eh\\" bindinput=\\"eh\\" bindconfirm=\\"eh\\" name=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></textarea>
</template>

<template name=\\"tmpl_0_cover-view\\">
  <cover-view scroll-top=\\"{{ xs.b(i.scrollTop,false) }}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                </block>
              </cover-view>
              <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
              <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
              <block s-else>
                <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
              </block>
            </block>
          </cover-view>
          <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
          <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
          <block s-else>
            <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
          </block>
        </block>
      </cover-view>
      <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
      <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
      <block s-else>
        <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
      </block>
    </block>
  </cover-view>
</template>

<template name=\\"tmpl_0_movable-area\\">
  <movable-area scale-area=\\"{{ xs.b(i.scaleArea,false) }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </movable-area>
</template>

<template name=\\"tmpl_0_movable-view\\">
  <movable-view direction=\\"{{ xs.b(i.direction,none) }}\\" inertia=\\"{{ xs.b(i.inertia,false) }}\\" out-of-bounds=\\"{{ xs.b(i.outOfBounds,false) }}\\" x=\\"{= i.x =}\\" y=\\"{= i.y =}\\" damping=\\"{{ xs.b(i.damping,20) }}\\" friction=\\"{{ xs.b(i.friction,2) }}\\" disabled=\\"{{ i.disabled }}\\" scale=\\"{{ xs.b(i.scale,false) }}\\" scale-min=\\"{{ xs.b(i.scaleMin,0.5) }}\\" scale-max=\\"{{ xs.b(i.scaleMax,10) }}\\" scale-value=\\"{{ xs.b(i.scaleValue,1) }}\\" bindchange=\\"eh\\" bindscale=\\"eh\\" bindhtouchmove=\\"eh\\" bindvtouchmove=\\"eh\\" width=\\"{{ xs.b(i.width,'10px') }}\\" height=\\"{{ xs.b(i.height,'10px') }}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{ i.animation }}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </movable-view>
</template>

<template name=\\"tmpl_0_scroll-view\\">
  <scroll-view scroll-x=\\"{{ xs.b(i.scrollX,false) }}\\" scroll-y=\\"{{ xs.b(i.scrollY,false) }}\\" upper-threshold=\\"{{ xs.b(i.upperThreshold,50) }}\\" lower-threshold=\\"{{ xs.b(i.lowerThreshold,50) }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ xs.b(i.scrollWithAnimation,false) }}\\" enable-back-to-top=\\"{{ xs.b(i.enableBackToTop,false) }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" animation=\\"{{ i.animation }}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_0_swiper\\">
  <swiper indicator-dots=\\"{{ xs.b(i.indicatorDots,false) }}\\" indicator-color=\\"{{ xs.b(i.indicatorColor,'rgba(0, 0, 0, .3)') }}\\" indicator-active-color=\\"{{ xs.b(i.indicatorActiveColor,'#000000') }}\\" autoplay=\\"{{ xs.b(i.autoplay,false) }}\\" current=\\"{{ xs.b(i.current,0) }}\\" interval=\\"{{ xs.b(i.interval,5000) }}\\" duration=\\"{{ xs.b(i.duration,500) }}\\" circular=\\"{{ xs.b(i.circular,false) }}\\" vertical=\\"{{ xs.b(i.vertical,false) }}\\" previous-margin=\\"{{ xs.b(i.previousMargin,'0px') }}\\" next-margin=\\"{{ xs.b(i.nextMargin,'0px') }}\\" display-multiple-items=\\"{{ xs.b(i.displayMultipleItems,1) }}\\" bindchange=\\"eh\\" bindtransition=\\"eh\\" bindanimationfinish=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{xs.f(i.cn)}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </swiper>
</template>

<template name=\\"tmpl_0_swiper-item\\">
  <swiper-item item-id=\\"{{ i.itemId }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </swiper-item>
</template>

<template name=\\"tmpl_0_navigator\\">
  <navigator url=\\"{{ i.url }}\\" open-type=\\"{{ xs.b(i.openType,'navigate') }}\\" delta=\\"{{ xs.b(i.delta,1) }}\\" hover-class=\\"{{ xs.b(i.hoverClass,'navigator-hover') }}\\" hover-stop-propagation=\\"{{ xs.b(i.hoverStopPropagation,false) }}\\" hover-start-time=\\"{{ xs.b(i.hoverStartTime,50) }}\\" hover-stay-time=\\"{{ xs.b(i.hoverStayTime,600) }}\\" bindsuccess=\\"eh\\" bindfail=\\"eh\\" bindcomplete=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </navigator>
</template>

<template name=\\"tmpl_0_audio\\">
  <audio id=\\"{{ i.id }}\\" src=\\"{{ i.src }}\\" loop=\\"{{ xs.b(i.loop,false) }}\\" controls=\\"{{ xs.b(i.controls,false) }}\\" poster=\\"{{ i.poster }}\\" name=\\"{{ i.name }}\\" author=\\"{{ i.author }}\\" binderror=\\"eh\\" bindplay=\\"eh\\" bindpause=\\"eh\\" bindtimeupdate=\\"eh\\" bindended=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></audio>
</template>

<template name=\\"tmpl_0_camera\\">
  <camera device-position=\\"{{ xs.b(i.devicePosition,'back') }}\\" flash=\\"{{ xs.b(i.flash,'auto') }}\\" bindstop=\\"eh\\" binderror=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                </block>
              </cover-view>
              <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
              <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
              <block s-else>
                <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
              </block>
            </block>
          </cover-view>
          <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
          <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
          <block s-else>
            <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
          </block>
        </block>
      </cover-view>
      <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
      <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
      <block s-else>
        <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
      </block>
    </block>
  </camera>
</template>

<template name=\\"tmpl_0_static-image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ xs.b(i.mode,'scaleToFill') }}\\" lazy-load=\\"{{ xs.b(i.lazyLoad,false) }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_0_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ xs.b(i.mode,'scaleToFill') }}\\" lazy-load=\\"{{ xs.b(i.lazyLoad,false) }}\\" binderror=\\"eh\\" bindload=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_0_live-player\\">
  <live-player src=\\"{{ i.src }}\\" autoplay=\\"{{ xs.b(i.autoplay,false) }}\\" muted=\\"{{ xs.b(i.muted,false) }}\\" orientation=\\"{{ xs.b(i.orientation,'vertical') }}\\" object-fit=\\"{{ xs.b(i.objectFit,'contain') }}\\" background-mute=\\"{{ xs.b(i.backgroundMute,false) }}\\" min-cache=\\"{{ xs.b(i.minCache,1) }}\\" max-cache=\\"{{ xs.b(i.maxCache,3) }}\\" bindstatechange=\\"eh\\" bindfullscreenchange=\\"eh\\" bindnetstatus=\\"eh\\" animation=\\"{{ i.animation }}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                </block>
              </cover-view>
              <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
              <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
              <block s-else>
                <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
              </block>
            </block>
          </cover-view>
          <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
          <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
          <block s-else>
            <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
          </block>
        </block>
      </cover-view>
      <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
      <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
      <block s-else>
        <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
      </block>
    </block>
  </live-player>
</template>

<template name=\\"tmpl_0_video\\">
  <video src=\\"{{ i.src }}\\" duration=\\"{{ i.duration }}\\" controls=\\"{{ xs.b(i.controls,true) }}\\" danmu-list=\\"{{ i.danmuList }}\\" danmu-btn=\\"{{ i.danmuBtn }}\\" enable-danmu=\\"{{ i.enableDanmu }}\\" autoplay=\\"{{ xs.b(i.autoplay,false) }}\\" loop=\\"{{ xs.b(i.loop,false) }}\\" muted=\\"{{ xs.b(i.muted,false) }}\\" initial-time=\\"{{ xs.b(i.initialTime,0) }}\\" page-gesture=\\"{{ xs.b(i.pageGesture,false) }}\\" direction=\\"{{ i.direction }}\\" show-progress=\\"{{ xs.b(i.showProgress,true) }}\\" show-fullscreen-btn=\\"{{ xs.b(i.showFullscreenBtn,true) }}\\" show-play-btn=\\"{{ xs.b(i.showPlayBtn,true) }}\\" show-center-play-btn=\\"{{ xs.b(i.showCenterPlayBtn,true) }}\\" enable-progress-gesture=\\"{{ xs.b(i.enableProgressGesture,true) }}\\" object-fit=\\"{{ xs.b(i.objectFit,'contain') }}\\" poster=\\"{{ i.poster }}\\" show-mute-btn=\\"{{ xs.b(i.showMuteBtn,false) }}\\" bindplay=\\"eh\\" bindpause=\\"eh\\" bindended=\\"eh\\" bindtimeupdate=\\"eh\\" bindfullscreenchange=\\"eh\\" bindwaiting=\\"eh\\" binderror=\\"eh\\" animation=\\"{{ i.animation }}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <ad s-if={{item.nn==='ad'}} id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" unit-id=\\"{{item.unitId}}\\" ad-intervals=\\"{{item.adIntervals}}\\" bindload=\\"eh\\" binderror=\\"eh\\" bindclose=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></ad>
      <block s-else>
        <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
          <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
            <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
              <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                  <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                    <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                  </block>
                </cover-view>
                <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
                <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
                <block s-else>
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                </block>
              </block>
            </cover-view>
            <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
            <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
            <block s-else>
              <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
            </block>
          </block>
        </cover-view>
        <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
        <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
        <block s-else>
          <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
        </block>
      </block>
    </block>
  </video>
</template>

<template name=\\"tmpl_0_canvas\\">
  <canvas canvas-id=\\"{{ i.canvasId }}\\" disable-scroll=\\"{{ xs.b(i.disableScroll,false) }}\\" binderror=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                </block>
              </cover-view>
              <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
              <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
              <block s-else>
                <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
              </block>
            </block>
          </cover-view>
          <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
          <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
          <block s-else>
            <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
          </block>
        </block>
      </cover-view>
      <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
      <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
      <block s-else>
        <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
      </block>
    </block>
  </canvas>
</template>

<template name=\\"tmpl_0_ad\\">
  <ad unit-id=\\"{{ i.unitId }}\\" ad-intervals=\\"{{ i.adIntervals }}\\" bindload=\\"eh\\" binderror=\\"eh\\" bindclose=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\"></ad>
</template>

<template name=\\"tmpl_0_web-view\\">
  <web-view src=\\"{{ i.src }}\\" bindmessage=\\"eh\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </web-view>
</template>

<template name=\\"tmpl_0_block\\">
  <block  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </block>
</template>

<template name=\\"tmpl_0_map\\">
  <map longitude=\\"{{ i.longitude }}\\" latitude=\\"{{ i.latitude }}\\" scale=\\"{{ xs.b(i.scale,16) }}\\" markers=\\"{{ xs.b(i.markers,[]) }}\\" covers=\\"{{ i.covers }}\\" polyline=\\"{{ xs.b(i.polyline,[]) }}\\" circles=\\"{{ xs.b(i.circles,[]) }}\\" controls=\\"{{ xs.b(i.controls,[]) }}\\" include-points=\\"{{ xs.b(i.includePoints,[]) }}\\" show-location=\\"{{ i.showLocation }}\\" layer-style=\\"{{ xs.b(i.layerStyle,1) }}\\" bindmarkertap=\\"eh\\" bindcontroltap=\\"eh\\" bindcallouttap=\\"eh\\" bindupdated=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
        <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
          <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
            <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
              <cover-view s-if=\\"{{item.nn==='cover-view'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\" scroll-top=\\"{{xs.b(item.scrollTop,false)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongtap=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\">
                <block s-for=\\"{{item.cn}}\\" s-key=\\"sid\\">
                  <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
                </block>
              </cover-view>
              <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
              <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
              <block s-else>
                <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
              </block>
            </block>
          </cover-view>
          <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
          <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
          <block s-else>
            <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
          </block>
        </block>
      </cover-view>
      <cover-image s-elif=\\"{{item.nn==='cover-image'}}\\" id=\\"{{item.uid||item.sid}}\\" data-sid=\\"{{item.sid}}\\"  src=\\"{{item.src}}\\" bindload=\\"eh\\" binderror=\\"eh\\" style=\\"{{item.st}}\\" class=\\"{{item.cl}}\\" bindtap=\\"eh\\"></cover-image>
      <block s-elif=\\"{{item.nn==='#text'}}\\">{{item.v}}</block>
      <block s-else>
        <template is=\\"{{xs.e(0)}}\\" data=\\"{{{i:item}}}\\" />
      </block>
    </block>
  </map>
</template>

<template name=\\"tmpl_0_slot\\">
  <view slot=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_slot-view\\">
  <view slot=\\"{{ i.name }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
      <template is=\\"{{xs.e(0)}}\\" data=\\"{{{ i:item }}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_#text\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_0_container\\">
  <template is=\\"{{xs.a(0, i.nn)}}\\" data=\\"{{{ i:i }}}\\" />
</template>


/** filePath: dist\\\\custom-wrapper.swan **/
<import src=\\"./base.swan\\" />
  <block s-for=\\"{{i.cn}}\\" s-key=\\"sid\\">
    <template is=\\"tmpl_0_container\\" data=\\"{{{ i:item }}}\\" />
  </block>

/** filePath: dist\\\\utils.sjs **/
module.exports = {
  a: function (l, n) {
    return 'tmpl_' + l + '_' + n
  },
  b: function (a, b) {
    return a === undefined ? b : a
  },
  c: function(i, prefix) {
    var s = i.focus !== undefined ? 'focus' : 'blur'
    return prefix + i.nn + '_' + s
  },
  d: function (i, v) {
    return i === undefined ? v : i
  },
  e: function (n) {
    return 'tmpl_' + n + '_container'
  },
  f: function (l) {
    return l.filter(function (i) {return i.nn === 'swiper-item'})
  }
}
"
`;
